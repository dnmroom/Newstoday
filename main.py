# ====================================================
# üîß T·ª∞ ƒê·ªòNG T·ªîNG H·ª¢P & PH√ÇN T√çCH TIN T·ª®C KINH T·∫æ TO√ÄN C·∫¶U + VI·ªÜT NAM
# Gemini 2.5 Flash, keyword ti·∫øng Anh, PDF Unicode (DejaVuSans), g·ª≠i Gmail t·ª± ƒë·ªông
# S·ª≠ d·ª•ng NewsAPI.org v·ªõi key f9828f522b274b2aaa987ac15751bc47
# ====================================================

import os
import requests
import datetime
import smtplib
import time
import schedule
import threading
import logging
# --- THAY ƒê·ªîI: X√≥a http.server, Th√™m Flask ---
# from http.server import BaseHTTPRequestHandler, HTTPServer
from flask import Flask 
# ---------------------------------------------
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
from email.mime.application import MIMEApplication
from reportlab.lib.pagesizes import A4
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer
from reportlab.pdfbase import pdfmetrics
from reportlab.pdfbase.ttfonts import TTFont
import google.generativeai as genai

# ========== LOGGING ==========
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

# ========== 1Ô∏è‚É£ C·∫§U H√åNH ==========
NEWSAPI_KEY = os.getenv("NEWSAPI_KEY", "f9828f522b274b2aaa987ac15751bc47")
GEMINI_API_KEY = os.getenv("GEMINI_API_KEY", "AIzaSyDjcqpFXkay_WiK9HLCChX5L0022u3Xw-s")
EMAIL_SENDER = os.getenv("EMAIL_SENDER", "manhetc@gmail.com")
EMAIL_PASSWORD = os.getenv("EMAIL_PASSWORD", "blptzqhzdzvfweiv")
EMAIL_RECEIVER = os.getenv("EMAIL_RECEIVER", "manhetc@gmail.com")
PORT = int(os.getenv("PORT", 10000)) 

# ========== 2Ô∏è‚É£ FONT (DejaVuSans v·ªõi fallback NotoSans) ==========
FONT_PATH_NOTO = "/tmp/NotoSans-Regular.ttf"
FONT_NAME = "DejaVuSans"  # Gi·∫£ ƒë·ªãnh DejaVuSans c√≥ s·∫µn tr√™n Render
try:
    if not os.path.exists(FONT_PATH_NOTO):
        logger.info("‚è≥ T·∫£i font NotoSans...")
        r = requests.get("https://github.com/googlefonts/noto-fonts/raw/main/hinted/ttf/NotoSans/NotoSans-Regular.ttf", stream=True, timeout=30)
        r.raise_for_status()
        with open(FONT_PATH_NOTO, "wb") as f:
            f.write(r.content)
    pdfmetrics.registerFont(TTFont("NotoSans", FONT_PATH_NOTO))
    FONT_NAME = "NotoSans"
    logger.info("‚úÖ Font NotoSans OK!")
except Exception as e:
    logger.warning(f"‚ùå NotoSans fail: {e}. D√πng DejaVuSans (gi·∫£ ƒë·ªãnh c√≥ s·∫µn).")

# ========== 3Ô∏è‚É£ T·ª™ KH√ìA (40 keywords, an to√†n 80 requests/ng√†y) ==========
KEYWORDS = [
    # 1. KINH T·∫æ Vƒ® M√î & CH√çNH S√ÅCH TI·ªÄN T·ªÜ (10)
    "global economic outlook", "central bank interest rate", "inflation control policy",
    "US Federal Reserve decision", "European Union economy", "China economic growth",
    "supply chain vulnerability", "recession probability", "global trade agreements",
    "forex market volatility",

    # 2. TH·ªä TR∆Ø·ªúNG T√ÄI S·∫¢N TRUY·ªÄN TH·ªêNG (10)
    "stock market major index", "real estate commercial", "housing market bubble",
    "gold price forecast", "silver market investment", "treasury yield curve",
    "US dollar strength", "equity market valuation", "corporate earnings report",
    "bond market liquidity",

    # 3. NƒÇNG L∆Ø·ª¢NG & H√ÄNG H√ìA (7)
    "crude oil price trend", "natural gas future", "OPEC production quota",
    "renewable energy investment", "industrial metal demand", "copper future price",
    "agricultural commodity price",

    # 4. C√îNG NGH·ªÜ & T√ÄI S·∫¢N K·ª∏ THU·∫¨T S·ªê (6)
    "AI impact on productivity", "semiconductor industry outlook", "Bitcoin price analysis",
    "cryptocurrency regulation", "decentralized finance trends", "tech industry layoff",

    # 5. KINH T·∫æ VI·ªÜT NAM V√Ä ƒê·ªäA PH∆Ø∆†NG (7)
    "FDI flow to Vietnam", "Vietnam export growth", "Vietnam manufacturing PMI",
    "Vietnam central bank policy", "Vietnam consumer confidence", "tourism recovery Vietnam",
    "Vietnam infrastructure investment"
] # T·ªïng c·ªông 40 keywords, 80 requests/ng√†y (an to√†n)

# ========== 4Ô∏è‚É£ L·∫§Y TIN T·ª™ NEWSAPI ==========
def get_news(keywords):
    articles = []
    logger.info("üîÑ ƒêang l·∫•y tin t·ª´ NewsAPI...")
    for kw in keywords:
        url = f"https://newsapi.org/v2/everything?q={kw}&language=en&pageSize=2&apiKey={NEWSAPI_KEY}"
        try:
            res = requests.get(url, timeout=10)
            if res.status_code == 200:
                for a in res.json().get("articles", []):
                    if a.get("title") and a.get("url"):
                        articles.append({
                            "title": a["title"],
                            "url": a["url"],
                            "source": a.get("source", {}).get("name", "Unknown"),
                            "published": a.get("publishedAt"),
                            "keyword": kw
                        })
            elif res.status_code == 429:
                logger.warning(f"‚ö†Ô∏è Rate limit v·ªõi t·ª´ kh√≥a '{kw}'. B·ªè qua.")
                time.sleep(60)
            else:
                logger.warning(f"‚ö†Ô∏è L·ªói NewsAPI ({res.status_code}) v·ªõi t·ª´ kh√≥a '{kw}': {res.json().get('message', 'Kh√¥ng r√µ')}")
            time.sleep(3)
        except Exception as e:
            logger.error(f"‚ùå L·ªói NewsAPI: {e}")
            time.sleep(3)
    logger.info(f"Thu ƒë∆∞·ª£c {len(articles)} b√†i vi·∫øt.")
    return articles

# ========== 5Ô∏è‚É£ PH√ÇN T√çCH GEMINI (theo ƒë·ªãnh h∆∞·ªõng) ==========
def summarize_with_gemini(api_key, articles):
    if not articles:
        return "Kh√¥ng c√≥ b√†i vi·∫øt m·ªõi ƒë·ªÉ ph√¢n t√≠ch. Ki·ªÉm tra API key NewsAPI ho·∫∑c rate limit."
    genai.configure(api_key=api_key)
    model = genai.GenerativeModel("gemini-2.5-flash")
    titles = "\n".join([f"- {a['title']} ({a['source']})" for a in articles[:15]])
    prompt = f"""
    B·∫°n l√† chuy√™n gia ph√¢n t√≠ch kinh t·∫ø to√†n c·∫ßu.
    H√£y ƒë·ªçc danh s√°ch tin t·ª©c sau v√†:
    1. T√≥m t·∫Øt xu h∆∞·ªõng kinh t·∫ø - t√†i ch√≠nh n·ªïi b·∫≠t.
    2. Ph√¢n t√≠ch t√°c ƒë·ªông ƒë·∫øn Vi·ªát Nam (FDI, t·ª∑ gi√°, ƒë·∫ßu t∆∞, xu·∫•t kh·∫©u...).
    3. Nh·∫≠n ƒë·ªãnh c∆° h·ªôi v√† r·ªßi ro ƒë·∫ßu t∆∞ (v√†ng, b·∫°c, ch·ª©ng kho√°n, crypto, BƒêS).
    4. Tr√¨nh b√†y b·∫±ng ti·∫øng Vi·ªát, r√µ r√†ng, s√∫c t√≠ch v√† chuy√™n nghi·ªáp.

    DANH S√ÅCH TIN:
    {titles}
    """
    try:
        response = model.generate_content(prompt)
        return response.text.strip()
    except Exception as e:
        logger.error(f"‚ùå L·ªói Gemini: {e}")
        return f"L·ªói Gemini: {e}"

# ========== 6Ô∏è‚É£ T·∫†O PDF ==========
def create_pdf(summary_text, articles):
    filename = f"Bao_cao_Kinh_te_{datetime.date.today()}.pdf"
    doc = SimpleDocTemplate(filename, pagesize=A4)
    styles = getSampleStyleSheet()
    styleVN = ParagraphStyle('VN', parent=styles['Normal'], fontName=FONT_NAME, fontSize=11, encoding='utf-8')
    titleStyle = ParagraphStyle('TitleVN', parent=styles['Title'], fontName=FONT_NAME, fontSize=16, alignment=1, encoding='utf-8')

    story = []
    story.append(Paragraph("B√ÅO C√ÅO PH√ÇN T√çCH TIN T·ª®C KINH T·∫æ TO√ÄN C·∫¶U & VI·ªÜT NAM", titleStyle))
    story.append(Spacer(1, 12))
    story.append(Paragraph(f"Ng√†y: {datetime.date.today()}", styleVN))
    story.append(Spacer(1, 12))
    story.append(Paragraph("<b>I. PH√ÇN T√çCH (Gemini 2.5 Flash):</b>", styleVN))
    story.append(Paragraph(summary_text.replace("\n", "<br/>"), styleVN))
    story.append(Spacer(1, 12))
    story.append(Paragraph("<b>II. DANH S√ÅCH TIN THAM KH·∫¢O:</b>", styleVN))
    for a in articles:
        story.append(Paragraph(f"- <a href='{a['url']}'>{a['title']}</a> ({a['source']})", styleVN))
        story.append(Spacer(1, 6))
    doc.build(story)
    return filename

# ========== 7Ô∏è‚É£ G·ª¨I EMAIL ==========
def send_email(subject, body, attachment_path):
    max_retries = 3
    for attempt in range(max_retries):
        try:
            msg = MIMEMultipart()
            msg["From"] = EMAIL_SENDER
            msg["To"] = EMAIL_RECEIVER
            msg["Subject"] = subject
            msg.attach(MIMEText(body, "plain", "utf-8"))
            with open(attachment_path, "rb") as f:
                part = MIMEApplication(f.read(), _subtype="pdf")
                part.add_header("Content-Disposition", f"attachment; filename={os.path.basename(attachment_path)}")
                msg.attach(part)
            with smtplib.SMTP_SSL("smtp.gmail.com", 465) as server:
                server.login(EMAIL_SENDER, EMAIL_PASSWORD)
                server.send_message(msg)
            logger.info("‚úÖ Email ƒë√£ ƒë∆∞·ª£c g·ª≠i th√†nh c√¥ng!")
            return
        except Exception as e:
            logger.error(f"‚ùå L·ªói email (l·∫ßn {attempt + 1}): {e}")
            if attempt < max_retries - 1:
                time.sleep(5)

# ========== 8Ô∏è‚É£ CH·∫†Y B√ÅO C√ÅO ==========
def run_report():
    logger.info(f"üïí B·∫Øt ƒë·∫ßu t·∫°o b√°o c√°o: {datetime.datetime.now()}")
    try:
        articles = get_news(KEYWORDS)
        logger.info(f"üìÑ Thu ƒë∆∞·ª£c {len(articles)} b√†i vi·∫øt.")
        summary = summarize_with_gemini(GEMINI_API_KEY, articles)
        pdf_file = create_pdf(summary, articles)
        send_email(
            subject="[B√ÅO C√ÅO KINH T·∫æ TO√ÄN C·∫¶U & VI·ªÜT NAM]",
            body="ƒê√≠nh k√®m l√† b√°o c√°o ph√¢n t√≠ch tin t·ª©c kinh t·∫ø to√†n c·∫ßu & Vi·ªát Nam m·ªõi nh·∫•t (AI t·ªïng h·ª£p).",
            attachment_path=pdf_file
        )
        logger.info("üéØ Ho√†n t·∫•t b√°o c√°o!")
    except Exception as e:
        logger.error(f"‚ùå L·ªói t·ªïng th·ªÉ: {e}")

# ========== 9Ô∏è‚É£ L·ªäCH TR√åNH (8h00 s√°ng v√† 23h00 t·ªëi UTC+7) ==========
schedule.every().day.at("01:00").do(run_report)  # 8h00 s√°ng (UTC+7 = UTC 01:00)
schedule.every().day.at("16:00").do(run_report)  # 23h00 t·ªëi (UTC+7 = UTC 16:00)

def schedule_runner():
    logger.info("üöÄ [SCHEDULER] H·ªá th·ªëng kh·ªüi ƒë·ªông, ch·ªù ƒë·∫øn 01:00 ho·∫∑c 16:00 UTC...")
    while True:
        # Th√™m log ki·ªÉm tra ƒë·ªãnh k·ª≥ 
        # logger.debug("Scheduler running pending tasks...") 
        schedule.run_pending()
        time.sleep(60)

# ========== üîü KEEP-ALIVE SERVER (D√πng Flask) ==========
# Kh·ªüi t·∫°o ·ª©ng d·ª•ng Flask
app = Flask(__name__)

# Route ƒë·ªÉ t·∫°o b√°o c√°o th·ªß c√¥ng (khi truy c·∫≠p /report)
@app.route("/report")
def trigger_report():
    # Kh·ªüi ch·∫°y run_report trong m·ªôt thread m·ªõi ƒë·ªÉ kh√¥ng l√†m blocking Flask server
    threading.Thread(target=run_report, daemon=True).start()
    return "Report generation initiated. Check logs for status.", 202 

# Route Health Check (B·∫Øt bu·ªôc ph·∫£i c√≥, Render s·∫Ω g·ªçi route n√†y)
@app.route("/health")
def health_check():
    return "OK", 200

# Route m·∫∑c ƒë·ªãnh
@app.route("/")
def index():
    return f"Service running. <a href='/report'>Click here</a> to trigger report manually or wait for scheduled run."

# ========== üîã CH·∫†Y ·ª®NG D·ª§NG ==========
if __name__ == "__main__":
    # Kh·ªüi ƒë·ªông scheduler tr√™n thread ri√™ng (ƒê·∫£m b·∫£o l√† daemon=True)
    scheduler_thread = threading.Thread(target=schedule_runner, daemon=True)
    scheduler_thread.start()

    # Ch·∫°y Flask server ch√≠nh ƒë·ªÉ gi·ªØ instance s·ªëng
    logger.info(f"üåê Flask KeepAlive server running on port {PORT} on host 0.0.0.0")
    # S·ª≠ d·ª•ng host='0.0.0.0' v√† port=PORT
    app.run(host='0.0.0.0', port=PORT) 
