# ====================================================
# üîß T·ª∞ ƒê·ªòNG T·ªîNG H·ª¢P & PH√ÇN T√çCH TIN T·ª®C KINH T·∫æ TO√ÄN C·∫¶U + VI·ªÜT NAM
# Gemini 2.5 Flash, keyword ti·∫øng Anh & Vi·ªát, PDF Unicode (NotoSans), g·ª≠i SendGrid
# S·ª≠ d·ª•ng NewsAPI.org (mi·ªÖn ph√≠ 80 requests/ng√†y)
# ====================================================

import os
import requests
import datetime
import time
import schedule
import threading
import logging
from flask import Flask
from sendgrid import SendGridAPIClient
from sendgrid.helpers.mail import Email, Content, Mail, Attachment, FileContent, FileName, FileType, Disposition
from reportlab.lib.pagesizes import A4
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer
from reportlab.pdfbase import pdfmetrics
from reportlab.pdfbase.ttfonts import TTFont
import google.generativeai as genai

# ========== LOGGING ==========
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

# ========== 1Ô∏è‚É£ C·∫§U H√åNH ==========
NEWSAPI_KEY = os.getenv("NEWSAPI_KEY", "f9828f522b274b2aaa987ac15751bc47")
GEMINI_API_KEY = os.getenv("GEMINI_API_KEY", "AIzaSyDjcqpFXkay_WiK9HLCChX5L0022u3Xw-s")
SENDGRID_API_KEY = os.getenv("SENDGRID_API_KEY")
EMAIL_SENDER = os.getenv("EMAIL_SENDER", "manhetc@gmail.com")
EMAIL_RECEIVER = os.getenv("EMAIL_RECEIVER", "manhetc@gmail.com")
PORT = int(os.getenv("PORT", 10000))

# ========== 2Ô∏è‚É£ FONT (NotoSans ∆∞u ti√™n) ==========
FONT_PATH_NOTO = "/tmp/NotoSans-Regular.ttf"
FONT_NAME = "Helvetica"  # Fallback
try:
    if not os.path.exists(FONT_PATH_NOTO):
        logger.info("‚è≥ T·∫£i font NotoSans...")
        r = requests.get("https://github.com/googlefonts/noto-fonts/raw/main/hinted/ttf/NotoSans/NotoSans-Regular.ttf", stream=True, timeout=30)
        r.raise_for_status()
        with open(FONT_PATH_NOTO, "wb") as f:
            f.write(r.content)
    pdfmetrics.registerFont(TTFont("NotoSans", FONT_PATH_NOTO))
    FONT_NAME = "NotoSans"
    logger.info("‚úÖ Font NotoSans OK!")
except Exception as e:
    logger.warning(f"‚ùå L·ªói t·∫£i font: {e}. S·ª≠ d·ª•ng Helvetica fallback.")
    FONT_NAME = "Helvetica"

# ========== 3Ô∏è‚É£ T·ª™ KH√ìA (32 keywords, 64 requests/ng√†y) ==========
KEYWORDS = [
    "global economy", "Vietnam economy", "stock market", "real estate",
    "gold price", "silver market", "oil price", "monetary policy",
    "interest rate", "US dollar", "inflation", "FDI Vietnam",
    "export growth", "manufacturing PMI", "labor market",
    "AI economy", "tech industry", "cryptocurrency",
    "Bitcoin", "Ethereum", "tourism Vietnam",
    "infrastructure Vietnam", "trade agreements",
    "supply chain", "recession", "central bank",
    "forex market", "consumer confidence",
    "renewable energy", "industrial metals",
    "housing market", "corporate earnings"
]

# ========== 4Ô∏è‚É£ L·∫§Y TIN T·ª™ NEWSAPI ==========
def get_news(keywords):
    articles = []
    logger.info("üîÑ ƒêang l·∫•y tin t·ª´ NewsAPI...")
    for kw in keywords:
        url = f"https://newsapi.org/v2/everything?q={kw}&language=en&pageSize=2&apiKey={NEWSAPI_KEY}"
        try:
            res = requests.get(url, timeout=10)
            if res.status_code == 200:
                for a in res.json().get("articles", []):
                    if a.get("title") and a.get("url"):
                        articles.append({
                            "title": a["title"],
                            "url": a["url"],
                            "source": a.get("source", {}).get("name", "Unknown"),
                            "published": a.get("publishedAt"),
                            "keyword": kw
                        })
            elif res.status_code == 429:
                logger.warning(f"‚ö†Ô∏è Rate limit v·ªõi t·ª´ kh√≥a '{kw}'. B·ªè qua.")
                time.sleep(60)
            else:
                logger.warning(f"‚ö†Ô∏è L·ªói NewsAPI ({res.status_code}) v·ªõi t·ª´ kh√≥a '{kw}': {res.json().get('message', 'Kh√¥ng r√µ')}")
            time.sleep(1)  # Delay 1s ƒë·ªÉ tr√°nh v∆∞·ª£t 80 requests/ng√†y
        except Exception as e:
            logger.error(f"‚ùå L·ªói NewsAPI: {e}")
            time.sleep(1)
    logger.info(f"Thu ƒë∆∞·ª£c {len(articles)} b√†i vi·∫øt.")
    return articles

# ========== 5Ô∏è‚É£ PH√ÇN T√çCH GEMINI (Chia batch) ==========
def summarize_with_gemini(api_key, articles):
    if not articles:
        return "Kh√¥ng c√≥ b√†i vi·∫øt m·ªõi ƒë·ªÉ ph√¢n t√≠ch."
    genai.configure(api_key=api_key)
    model = genai.GenerativeModel("gemini-2.5-flash")
    summary = ""
    batch_size = 10
    for i in range(0, len(articles), batch_size):
        batch_articles = articles[i:i + batch_size]
        titles = "\n".join([f"- {a['title']} ({a['source']})" for a in batch_articles])
        prompt = f"""
        B·∫°n l√† chuy√™n gia ph√¢n t√≠ch kinh t·∫ø to√†n c·∫ßu.
        H√£y ƒë·ªçc danh s√°ch tin t·ª©c sau v√†:
        1. T√≥m t·∫Øt xu h∆∞·ªõng kinh t·∫ø - t√†i ch√≠nh n·ªïi b·∫≠t.
        2. Ph√¢n t√≠ch t√°c ƒë·ªông ƒë·∫øn Vi·ªát Nam (FDI, t·ª∑ gi√°, ƒë·∫ßu t∆∞, xu·∫•t kh·∫©u...).
        3. Nh·∫≠n ƒë·ªãnh c∆° h·ªôi v√† r·ªßi ro ƒë·∫ßu t∆∞ (v√†ng, b·∫°c, ch·ª©ng kho√°n, crypto, BƒêS).
        4. Tr√¨nh b√†y b·∫±ng ti·∫øng Vi·ªát, r√µ r√†ng, s√∫c t√≠ch v√† chuy√™n nghi·ªáp.

        DANH S√ÅCH TIN:
        {titles}
        """
        try:
            response = model.generate_content(prompt)
            summary += response.text.strip() + "\n\n"
            logger.info(f"‚úÖ Ho√†n th√†nh batch {i//batch_size + 1} v·ªõi {len(batch_articles)} b√†i.")
            time.sleep(30)  # Delay 30s gi·ªØa c√°c batch ƒë·ªÉ tr√°nh v∆∞·ª£t quota 10 requests/ph√∫t
        except Exception as e:
            logger.error(f"‚ùå L·ªói Gemini batch {i//batch_size + 1}: {e}")
            summary += "L·ªói Gemini trong batch n√†y.\n\n"
    return summary.strip()

# ========== 6Ô∏è‚É£ T·∫†O PDF ==========
def create_pdf(summary_text, articles):
    filename = f"Bao_cao_Kinh_te_{datetime.date.today()}.pdf"
    doc = SimpleDocTemplate(filename, pagesize=A4)
    styles = getSampleStyleSheet()
    styleVN = ParagraphStyle('VN', parent=styles['Normal'], fontName=FONT_NAME, fontSize=11, leading=14, encoding='utf-8')
    titleStyle = ParagraphStyle('TitleVN', parent=styles['Title'], fontName=FONT_NAME, fontSize=16, alignment=1, encoding='utf-8')

    story = []
    story.append(Paragraph("B√ÅO C√ÅO PH√ÇN T√çCH TIN T·ª®C KINH T·∫æ TO√ÄN C·∫¶U & VI·ªÜT NAM", titleStyle))
    story.append(Spacer(1, 12))
    story.append(Paragraph(f"Ng√†y: {datetime.date.today()}", styleVN))
    story.append(Spacer(1, 12))
    story.append(Paragraph("<b>I. PH√ÇN T√çCH (Gemini 2.5 Flash):</b>", styleVN))
    for para in summary_text.split("\n\n"):
        story.append(Paragraph(para.replace("\n", "<br/>"), styleVN))
        story.append(Spacer(1, 6))
    story.append(Spacer(1, 12))
    story.append(Paragraph("<b>II. DANH S√ÅCH TIN THAM KH·∫¢O:</b>", styleVN))
    for a in articles:
        story.append(Paragraph(f"- <a href='{a['url']}'>{a['title']}</a> ({a['source']})", styleVN))
        story.append(Spacer(1, 6))
    doc.build(story)
    return filename

# ========== 7Ô∏è‚É£ G·ª¨I EMAIL (SendGrid) ==========
def send_email(subject, body, attachment_path):
    max_retries = 3
    for attempt in range(max_retries):
        try:
            sg = SendGridAPIClient(SENDGRID_API_KEY)
            with open(attachment_path, "rb") as f:
                pdf_data = f.read()
            from_email = Email(EMAIL_SENDER)
            to_email = Email(EMAIL_RECEIVER)
            content = Content("text/plain", body)
            mail = Mail(from_email, subject, to_email, content)
            attachment = Attachment(
                FileContent(pdf_data),
                FileName(os.path.basename(attachment_path)),
                FileType("application/pdf"),
                Disposition("attachment")
            )
            mail.attachment = attachment
            response = sg.client.mail.send.post(request_body=mail.get())
            if response.status_code == 202:
                logger.info("‚úÖ Email ƒë√£ ƒë∆∞·ª£c g·ª≠i th√†nh c√¥ng!")
                return
        except Exception as e:
            logger.error(f"‚ùå L·ªói email (l·∫ßn {attempt + 1}): {e}")
            if attempt < max_retries - 1:
                time.sleep(15)  # TƒÉng delay l√™n 15s ƒë·ªÉ ch·ªù m·∫°ng Render

# ========== 8Ô∏è‚É£ CH·∫†Y B√ÅO C√ÅO ==========
def run_report():
    logger.info(f"üïí B·∫Øt ƒë·∫ßu t·∫°o b√°o c√°o: {datetime.datetime.now()}")
    try:
        articles = get_news(KEYWORDS)
        logger.info(f"üìÑ Thu ƒë∆∞·ª£c {len(articles)} b√†i vi·∫øt.")
        summary = summarize_with_gemini(GEMINI_API_KEY, articles)
        pdf_file = create_pdf(summary, articles)
        send_email(
            "[B√ÅO C√ÅO KINH T·∫æ TO√ÄN C·∫¶U & VI·ªÜT NAM]",
            "ƒê√≠nh k√®m l√† b√°o c√°o ph√¢n t√≠ch tin t·ª©c kinh t·∫ø to√†n c·∫ßu & Vi·ªát Nam m·ªõi nh·∫•t (AI t·ªïng h·ª£p).",
            pdf_file
        )
        logger.info("üéØ Ho√†n t·∫•t b√°o c√°o!")
    except Exception as e:
        logger.error(f"‚ùå L·ªói t·ªïng th·ªÉ: {e}")

# ========== 9Ô∏è‚É£ L·ªäCH TR√åNH (08:00 v√† 23:00 UTC+7) ==========
schedule.every().day.at("01:00").do(run_report)  # 08:00 s√°ng (UTC+7 = UTC 01:00)
schedule.every().day.at("16:00").do(run_report)  # 23:00 t·ªëi (UTC+7 = UTC 16:00)

def schedule_runner():
    logger.info("üöÄ [SCHEDULER] H·ªá th·ªëng kh·ªüi ƒë·ªông, ch·ªù ƒë·∫øn 01:00 ho·∫∑c 16:00 UTC...")
    while True:
        schedule.run_pending()
        time.sleep(60)

# ========== üîü KEEP-ALIVE SERVER (Flask) ==========
app = Flask(__name__)

@app.route("/report")
def trigger_report():
    threading.Thread(target=run_report).start()
    return "Report generation initiated. Check logs for status.", 202

@app.route("/health")
def health_check():
    return "OK", 200

@app.route("/")
def index():
    return f"Service running. <a href='/report'>Click here</a> to trigger report manually or wait for scheduled run."

if __name__ == "__main__":
    scheduler_thread = threading.Thread(target=schedule_runner, daemon=True)
    scheduler_thread.start()
    logger.info(f"üåê Flask KeepAlive server running on port {PORT} on host 0.0.0.0")
    app.run(host='0.0.0.0', port=PORT, threaded=True)
