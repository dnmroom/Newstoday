# ====================================================
# üîß T·ª∞ ƒê·ªòNG T·ªîNG H·ª¢P & PH√ÇN T√çCH TIN T·ª®C KINH T·∫æ TO√ÄN C·∫¶U + VI·ªÜT NAM
# Gemini 2.5 Flash, keyword ti·∫øng Anh & Vi·ªát, PDF Unicode (NotoSans)
# G·ª¨I EMAIL: D√πng th∆∞ vi·ªán SMTPLIB (Mi·ªÖn ph√≠ qua SMTP Server)
# T·ªêI ∆ØU: NgƒÉn ch·∫∑n ch·∫°y ƒë·ªìng th·ªùi (Lock) & Kh·∫Øc ph·ª•c Rate Limit NewsAPI
# ====================================================

import os
import requests
import datetime
import time
import schedule
import threading
import logging
from flask import Flask

# TH∆Ø VI·ªÜN G·ª¨I EMAIL M·ªöI (THAY TH·∫æ SENDGRID)
import smtplib
from email.mime.multipart import MIMEMultipart
from email.mime.base import MIMEBase
from email.mime.text import MIMEText
from email import encoders

from reportlab.lib.pagesizes import A4
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer
from reportlab.pdfbase import pdfmetrics
from reportlab.pdfbase.ttfonts import TTFont
import google.generativeai as genai

# ========== LOGGING ==========
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

# Lock ƒë·ªÉ ngƒÉn ch·∫∑n nhi·ªÅu lu·ªìng ch·∫°y b√°o c√°o c√πng l√∫c
REPORT_LOCK = threading.Lock()

# ========== 1Ô∏è‚É£ C·∫§U H√åNH ==========
NEWSAPI_KEY = os.getenv("NEWSAPI_KEY", "f9828f522b274b2aaa987ac15751bc47")
GEMINI_API_KEY = os.getenv("GEMINI_API_KEY", "AIzaSyDjcqpFXkay_WiK9HLCChX5L0022u3Xw-s")

# --- C·∫•u h√¨nh SMTP M·ªöI (Mi·ªÖn ph√≠ qua Gmail/Outlook - Y√™u c·∫ßu App Password) ---
SMTP_SERVER = os.getenv("SMTP_SERVER", "smtp.gmail.com") 
SMTP_PORT = int(os.getenv("SMTP_PORT", 587))            
SMTP_USERNAME = os.getenv("SMTP_USERNAME", "manhetc@gmail.com") 
SMTP_PASSWORD = os.getenv("SMTP_PASSWORD")              

EMAIL_SENDER = SMTP_USERNAME                          
EMAIL_RECEIVER = os.getenv("EMAIL_RECEIVER", "manhetc@gmail.com")
PORT = int(os.getenv("PORT", 10000))

# ========== 2Ô∏è‚É£ FONT (NotoSans ∆∞u ti√™n) ==========
FONT_PATH_NOTO = "/tmp/NotoSans-Regular.ttf"
FONT_NAME = "Helvetica" 
try:
    if not os.path.exists(FONT_PATH_NOTO):
        logger.info("‚è≥ T·∫£i font NotoSans...")
        r = requests.get("https://github.com/googlefonts/noto-fonts/raw/main/hinted/ttf/NotoSans/NotoSans-Regular.ttf", stream=True, timeout=30)
        r.raise_for_status()
        with open(FONT_PATH_NOTO, "wb") as f:
            f.write(r.content)
    pdfmetrics.registerFont(TTFont("NotoSans", FONT_PATH_NOTO))
    FONT_NAME = "NotoSans"
    logger.info("‚úÖ Font NotoSans OK!")
except Exception as e:
    logger.warning(f"‚ùå L·ªói t·∫£i font: {e}. S·ª≠ d·ª•ng Helvetica fallback.")
    FONT_NAME = "Helvetica"

# ========== 3Ô∏è‚É£ T·ª™ KH√ìA (20 KEY T·ªêI ∆ØU QUOTA MI·ªÑN PH√ç) ==========
KEYWORDS = [
    "global economy", "Vietnam economy", "stock market", "real estate",
    "gold price", "silver price", "monetary policy", "interest rate",
    "US dollar", "inflation", "FDI Vietnam", "export growth",
    "manufacturing PMI", "AI economy", "tech industry", "cryptocurrency",
    "infrastructure Vietnam", "trade agreements", "supply chain",
    "recession"
]

# ========== 4Ô∏è‚É£ L·∫§Y TIN T·ª™ NEWSAPI (T·ªêI ∆ØU RATE LIMIT) ==========
def get_news(keywords):
    articles = []
    logger.info(f"üîÑ ƒêang l·∫•y tin t·ª´ NewsAPI v·ªõi {len(keywords)} t·ª´ kh√≥a...")
    
    for kw in keywords:
        url = f"https://newsapi.org/v2/everything?q={kw}&language=en&pageSize=2&apiKey={NEWSAPI_KEY}"
        try:
            res = requests.get(url, timeout=10)
            status_code = res.status_code
            
            if status_code == 200:
                for a in res.json().get("articles", []):
                    if a.get("title") and a.get("url"):
                        articles.append({
                            "title": a["title"],
                            "url": a["url"],
                            "source": a.get("source", {}).get("name", "Unknown"),
                            "published": a.get("publishedAt"),
                            "keyword": kw
                        })
                
            elif status_code == 429:
                # X·ª≠ l√Ω Rate Limit (429): D·ª´ng to√†n b·ªô qu√° tr√¨nh l·∫•y tin v√† ch·ªù reset
                logger.error(f"‚ùå V∆Ø·ª¢T RATE LIMIT (429) v·ªõi t·ª´ kh√≥a '{kw}'. C√≥ th·ªÉ ƒë√£ h·∫øt quota ng√†y. T·∫°m d·ª´ng 10 ph√∫t.")
                time.sleep(600)  # T·∫°m d·ª´ng 10 ph√∫t (600 gi√¢y)
                return articles # D·ª´ng ngay l·∫≠p t·ª©c v√† tr·∫£ v·ªÅ c√°c b√†i ƒë√£ l·∫•y ƒë∆∞·ª£c (n·∫øu c√≥)
                
            else:
                logger.warning(f"‚ö†Ô∏è L·ªói NewsAPI ({status_code}) v·ªõi t·ª´ kh√≥a '{kw}': {res.json().get('message', 'Kh√¥ng r√µ')}")
            
            # TƒÉng Delay gi·ªØa c√°c request ƒë·ªÉ tr√°nh Rate Limit theo t·∫ßn su·∫•t
            time.sleep(5) 
            
        except Exception as e:
            logger.error(f"‚ùå L·ªói m·∫°ng/k·∫øt n·ªëi NewsAPI: {e}")
            time.sleep(5)
            
    logger.info(f"Thu ƒë∆∞·ª£c {len(articles)} b√†i vi·∫øt.")
    return articles

# ========== 5Ô∏è‚É£ PH√ÇN T√çCH GEMINI (Chia batch) ==========
def summarize_with_gemini(api_key, articles):
    if not articles:
        return "Kh√¥ng c√≥ b√†i vi·∫øt m·ªõi ƒë·ªÉ ph√¢n t√≠ch."
    genai.configure(api_key=api_key)
    model = genai.GenerativeModel("gemini-2.5-flash")
    summary = ""
    batch_size = 10
    
    unique_articles = list({a['title']: a for a in articles}.values())
    logger.info(f"ƒê√£ l·ªçc c√≤n {len(unique_articles)} b√†i vi·∫øt duy nh·∫•t.")
    
    for i in range(0, len(unique_articles), batch_size):
        batch_articles = unique_articles[i:i + batch_size]
        titles = "\n".join([f"- {a['title']} ({a['source']})" for a in batch_articles])
        prompt = f"""
        B·∫°n l√† chuy√™n gia ph√¢n t√≠ch kinh t·∫ø to√†n c·∫ßu.
        H√£y ƒë·ªçc danh s√°ch tin t·ª©c sau v√†:
        1. T√≥m t·∫Øt xu h∆∞·ªõng kinh t·∫ø - t√†i ch√≠nh n·ªïi b·∫≠t.
        2. Ph√¢n t√≠ch t√°c ƒë·ªông ƒë·∫øn Vi·ªát Nam (FDI, t·ª∑ gi√°, ƒë·∫ßu t∆∞, xu·∫•t kh·∫©u...).
        3. Nh·∫≠n ƒë·ªãnh c∆° h·ªôi v√† r·ªßi ro ƒë·∫ßu t∆∞ (v√†ng, b·∫°c, ch·ª©ng kho√°n, crypto, BƒêS).
        4. Tr√¨nh b√†y b·∫±ng ti·∫øng Vi·ªát, r√µ r√†ng, s√∫c t√≠ch v√† chuy√™n nghi·ªáp.

        DANH S√ÅCH TIN:
        {titles}
        """
        try:
            response = model.generate_content(prompt)
            summary += response.text.strip() + "\n\n"
            logger.info(f"‚úÖ Ho√†n th√†nh batch {i//batch_size + 1} v·ªõi {len(batch_articles)} b√†i.")
            time.sleep(30) 
        except Exception as e:
            logger.error(f"‚ùå L·ªói Gemini batch {i//batch_size + 1}: {e}")
            summary += "L·ªói Gemini trong batch n√†y.\n\n"
    return summary.strip()

# ========== 6Ô∏è‚É£ T·∫†O PDF ==========
def create_pdf(summary_text, articles):
    filename = f"Bao_cao_Kinh_te_{datetime.date.today()}.pdf"
    doc = SimpleDocTemplate(filename, pagesize=A4)
    styles = getSampleStyleSheet()
    styleVN = ParagraphStyle('VN', parent=styles['Normal'], fontName=FONT_NAME, fontSize=11, leading=14, encoding='utf-8')
    titleStyle = ParagraphStyle('TitleVN', parent=styles['Title'], fontName=FONT_NAME, fontSize=16, alignment=1, encoding='utf-8')

    story = []
    story.append(Paragraph("B√ÅO C√ÅO PH√ÇN T√çCH TIN T·ª®C KINH T·∫æ TO√ÄN C·∫¶U & VI·ªÜT NAM", titleStyle))
    story.append(Spacer(1, 12))
    story.append(Paragraph(f"Ng√†y: {datetime.date.today()}", styleVN))
    story.append(Spacer(1, 12))
    story.append(Paragraph("<b>I. PH√ÇN T√çCH (Gemini 2.5 Flash):</b>", styleVN))
    for para in summary_text.split("\n\n"):
        story.append(Paragraph(para.replace("\n", "<br/>"), styleVN))
        story.append(Spacer(1, 6))
    story.append(Spacer(1, 12))
    story.append(Paragraph("<b>II. DANH S√ÅCH TIN THAM KH·∫¢O:</b>", styleVN))
    
    unique_articles = list({a['title']: a for a in articles}.values())
    for a in unique_articles:
        story.append(Paragraph(f"- <a href='{a['url']}'>{a['title']}</a> ({a['source']})", styleVN))
        story.append(Spacer(1, 6))
    doc.build(story)
    return filename

# ========== 7Ô∏è‚É£ G·ª¨I EMAIL (SMTP - Thay th·∫ø SendGrid) ==========
def send_email(subject, body, attachment_path):
    if not all([SMTP_SERVER, SMTP_PORT, SMTP_USERNAME, SMTP_PASSWORD]):
        logger.error("‚ùå L·ªói: Thi·∫øu c·∫•u h√¨nh SMTP (Server/Port/Username/Password)!")
        return

    max_retries = 3
    for attempt in range(max_retries):
        try:
            # 1. T·∫°o ƒë·ªëi t∆∞·ª£ng email MIME
            msg = MIMEMultipart()
            msg['From'] = EMAIL_SENDER
            msg['To'] = EMAIL_RECEIVER
            msg['Subject'] = subject
            msg.attach(MIMEText(body, 'plain', 'utf-8'))
            
            # 2. Th√™m file ƒë√≠nh k√®m PDF
            with open(attachment_path, "rb") as f:
                part = MIMEBase('application', 'octet-stream')
                part.set_payload(f.read())
            
            encoders.encode_base64(part)
            part.add_header(
                'Content-Disposition',
                f"attachment; filename= {os.path.basename(attachment_path)}",
            )
            msg.attach(part)

            # 3. K·∫øt n·ªëi v√† g·ª≠i qua SMTP
            logger.info(f"‚è≥ ƒêang k·∫øt n·ªëi SMTP t·ªõi {SMTP_SERVER}:{SMTP_PORT}...")
            
            with smtplib.SMTP(SMTP_SERVER, SMTP_PORT) as server:
                server.starttls() 
                server.login(SMTP_USERNAME, SMTP_PASSWORD)
                server.sendmail(EMAIL_SENDER, EMAIL_RECEIVER, msg.as_string())
            
            logger.info("‚úÖ Email ƒë√£ ƒë∆∞·ª£c g·ª≠i th√†nh c√¥ng qua SMTP!")
            return
            
        except Exception as e:
            logger.error(f"‚ùå L·ªói email SMTP (l·∫ßn {attempt + 1}): {e}")
            if attempt < max_retries - 1:
                time.sleep(15)
            else:
                logger.error("‚ùå G·ª≠i email th·∫•t b·∫°i sau t·∫•t c·∫£ l·∫ßn th·ª≠.")

# ========== 8Ô∏è‚É£ CH·∫†Y B√ÅO C√ÅO (ƒê√É TH√äM LOCK) ==========
def run_report():
    # NgƒÉn ch·∫∑n nhi·ªÅu lu·ªìng ch·∫°y c√πng l√∫c
    if not REPORT_LOCK.acquire(blocking=False):
        logger.warning("üö´ ƒêang c√≥ b√°o c√°o kh√°c ch·∫°y. B·ªè qua trigger th·ªß c√¥ng l·∫∑p l·∫°i.")
        return 
        
    pdf_file = None
    try:
        logger.info(f"üïí B·∫Øt ƒë·∫ßu t·∫°o b√°o c√°o: {datetime.datetime.now()}")
        
        articles = get_news(KEYWORDS)
        
        if articles:
            logger.info(f"üìÑ Thu ƒë∆∞·ª£c {len(articles)} b√†i vi·∫øt.")
            summary = summarize_with_gemini(GEMINI_API_KEY, articles)
            pdf_file = create_pdf(summary, articles)
            send_email(
                f"[B√ÅO C√ÅO KINH T·∫æ] {datetime.date.today()}",
                "ƒê√≠nh k√®m l√† b√°o c√°o ph√¢n t√≠ch tin t·ª©c kinh t·∫ø to√†n c·∫ßu & Vi·ªát Nam m·ªõi nh·∫•t (AI t·ªïng h·ª£p).",
                pdf_file
            )
        else:
            logger.info("‚ÑπÔ∏è Kh√¥ng c√≥ b√†i vi·∫øt m·ªõi ƒë·ªÉ t·∫°o b√°o c√°o ho·∫∑c Rate Limit ƒë√£ ƒë·∫°t. B·ªè qua g·ª≠i email.")
            
        logger.info("üéØ Ho√†n t·∫•t b√°o c√°o!")
        
    except Exception as e:
        logger.error(f"‚ùå L·ªói t·ªïng th·ªÉ: {e}")
    finally:
        # D·ªçn d·∫πp file PDF v√† Gi·∫£i ph√≥ng Lock
        if pdf_file and os.path.exists(pdf_file):
            os.remove(pdf_file)
            logger.info(f"üóëÔ∏è ƒê√£ x√≥a file t·∫°m: {pdf_file}")
        REPORT_LOCK.release() # Gi·∫£i ph√≥ng lock, d√π c√≥ l·ªói hay kh√¥ng

# ========== 9Ô∏è‚É£ L·ªäCH TR√åNH (08:00 v√† 23:00 UTC+7) ==========
schedule.every().day.at("01:00").do(run_report)  # 08:00 s√°ng (UTC+7 = UTC 01:00)
schedule.every().day.at("16:00").do(run_report)  # 23:00 t·ªëi (UTC+7 = UTC 16:00)

def schedule_runner():
    logger.info("üöÄ [SCHEDULER] H·ªá th·ªëng kh·ªüi ƒë·ªông, ch·ªù ƒë·∫øn 01:00 ho·∫∑c 16:00 UTC...")
    while True:
        schedule.run_pending()
        time.sleep(60)

# ========== üîü KEEP-ALIVE SERVER (Flask) ==========
app = Flask(__name__)

@app.route("/report")
def trigger_report():
    # Trigger trong m·ªôt lu·ªìng ri√™ng, ƒë∆∞·ª£c b·∫£o v·ªá b·∫±ng Lock
    threading.Thread(target=run_report).start()
    return "Report generation initiated. Check logs for status.", 202

@app.route("/health")
def health_check():
    return "OK", 200

@app.route("/")
def index():
    return f"Service running. <a href='/report'>Click here</a> to trigger report manually or wait for scheduled run."

if __name__ == "__main__":
    scheduler_thread = threading.Thread(target=schedule_runner, daemon=True)
    scheduler_thread.start()
    logger.info(f"üåê Flask KeepAlive server running on port {PORT} on host 0.0.0.0")
    app.run(host='0.0.0.0', port=PORT, threaded=True)
