# ====================================================
# ü§ñ B√ÅO C√ÅO KINH T·∫æ TO√ÄN C·∫¶U & VI·ªÜT NAM - T·ª∞ ƒê·ªòNG 3 L·∫¶N/NG√ÄY
# Gemini 2.5 Flash + PDF Unicode + Gmail Automation (Render)
# ====================================================

import os, time, datetime, smtplib, requests, schedule
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
from email.mime.application import MIMEApplication
from reportlab.lib.pagesizes import A4
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer
from reportlab.pdfbase import pdfmetrics
from reportlab.pdfbase.ttfonts import TTFont
import google.generativeai as genai

# --- C√ÄI FONT NOTO SANS (Unicode, ti·∫øng Vi·ªát chu·∫©n) ---
FONT_PATH = "NotoSans-Regular.ttf"
if not os.path.exists(FONT_PATH):
    url = "https://github.com/googlefonts/noto-fonts/raw/main/hinted/ttf/NotoSans/NotoSans-Regular.ttf"
    print("‚è≥ ƒêang t·∫£i font NotoSans t·ª´ Google Fonts...")
    r = requests.get(url, timeout=30)
    if r.status_code == 200 and r.content[:4] != b"<ht":  # tr√°nh t·∫£i nh·∫ßm file HTML
        with open(FONT_PATH, "wb") as f:
            f.write(r.content)
        print("‚úÖ Font ƒë√£ ƒë∆∞·ª£c t·∫£i th√†nh c√¥ng!")
    else:
        raise RuntimeError("‚ùå Kh√¥ng t·∫£i ƒë∆∞·ª£c font NotoSans, ki·ªÉm tra URL ho·∫∑c m·∫°ng Render.")
pdfmetrics.registerFont(TTFont("NotoSans", FONT_PATH))
FONT_NAME = "NotoSans"

# --- ƒê·ªåC BI·∫æN M√îI TR∆Ø·ªúNG ---
GNEWS_API_KEY = os.getenv("GNEWS_API_KEY")
GEMINI_API_KEY = os.getenv("GEMINI_API_KEY")
EMAIL_SENDER = os.getenv("EMAIL_SENDER")
EMAIL_PASSWORD = os.getenv("EMAIL_PASSWORD")
EMAIL_RECEIVER = os.getenv("EMAIL_RECEIVER")

# --- DANH S√ÅCH T·ª™ KH√ìA SONG NG·ªÆ ---
KEYWORDS = [
    "kinh t·∫ø th·∫ø gi·ªõi","kinh t·∫ø Vi·ªát Nam","th·ªã tr∆∞·ªùng ch·ª©ng kho√°n","b·∫•t ƒë·ªông s·∫£n",
    "gi√° v√†ng","gi√° b·∫°c","th·ªã tr∆∞·ªùng d·∫ßu m·ªè","ch√≠nh s√°ch ti·ªÅn t·ªá","l√£i su·∫•t ng√¢n h√†ng",
    "t·ª∑ gi√° USD","l·∫°m ph√°t","FDI Vi·ªát Nam","xu·∫•t kh·∫©u","s·∫£n xu·∫•t c√¥ng nghi·ªáp",
    "th·ªã tr∆∞·ªùng lao ƒë·ªông","AI v√† kinh t·∫ø","doanh nghi·ªáp c√¥ng ngh·ªá",
    "global economy","Vietnam economy","stock market","real estate",
    "gold price","silver market","oil price","monetary policy",
    "interest rate","US dollar","inflation","cryptocurrency",
    "Bitcoin","Ethereum","AI and business","FDI in Vietnam"
]

# --- L·∫§Y TIN T·ª™ GNEWS ---
def get_news(api_key, keywords):
    articles=[]
    for kw in keywords:
        for lang in ["vi","en"]:
            try:
                url=f"https://gnews.io/api/v4/search?q={kw}&lang={lang}&max=2&token={api_key}"
                res=requests.get(url,timeout=10)
                if res.status_code==200:
                    for a in res.json().get("articles",[]):
                        if a["title"] and a["url"]:
                            articles.append({
                                "title":a["title"],
                                "url":a["url"],
                                "source":a["source"]["name"],
                                "keyword":kw})
                time.sleep(0.8)
            except Exception as e:
                print(f"‚ö†Ô∏è L·ªói l·∫•y tin: {e}")
    return articles

# --- PH√ÇN T√çCH B·∫∞NG GEMINI ---
def summarize_with_gemini(api_key, articles):
    if not articles: return "Kh√¥ng c√≥ b√†i vi·∫øt m·ªõi."
    genai.configure(api_key=api_key)
    model = genai.GenerativeModel("gemini-2.5-flash")
    titles="\n".join([f"- {a['title']} ({a['source']})" for a in articles])
    prompt=f"""
    B·∫°n l√† chuy√™n gia ph√¢n t√≠ch kinh t·∫ø to√†n c·∫ßu.
    H√£y ƒë·ªçc danh s√°ch tin t·ª©c sau v√†:
    1. T√≥m t·∫Øt xu h∆∞·ªõng kinh t·∫ø - t√†i ch√≠nh n·ªïi b·∫≠t.
    2. Ph√¢n t√≠ch t√°c ƒë·ªông ƒë·∫øn Vi·ªát Nam (FDI, t·ª∑ gi√°, ƒë·∫ßu t∆∞, xu·∫•t kh·∫©u...).
    3. Nh·∫≠n ƒë·ªãnh c∆° h·ªôi v√† r·ªßi ro ƒë·∫ßu t∆∞ (v√†ng, b·∫°c, ch·ª©ng kho√°n, crypto, BƒêS).
    4. Tr√¨nh b√†y b·∫±ng ti·∫øng Vi·ªát, r√µ r√†ng, s√∫c t√≠ch v√† chuy√™n nghi·ªáp.

    DANH S√ÅCH TIN:
    {titles}
    """
    try:
        return model.generate_content(prompt).text.strip()
    except Exception as e:
        return f"L·ªói khi g·ªçi Gemini: {e}"

# --- T·∫†O FILE PDF ---
def create_pdf(summary, articles):
    fn=f"Bao_cao_Kinh_te_{datetime.date.today()}.pdf"
    doc=SimpleDocTemplate(fn,pagesize=A4)
    styles=getSampleStyleSheet()
    styleVN=ParagraphStyle('VN',parent=styles['Normal'],fontName=FONT_NAME,fontSize=11)
    titleStyle=ParagraphStyle('TitleVN',parent=styles['Title'],fontName=FONT_NAME,fontSize=16,alignment=1)
    story=[
        Paragraph("B√ÅO C√ÅO PH√ÇN T√çCH TIN T·ª®C KINH T·∫æ TO√ÄN C·∫¶U & VI·ªÜT NAM",titleStyle),
        Spacer(1,12),
        Paragraph(f"Ng√†y: {datetime.date.today()}",styleVN),
        Spacer(1,12),
        Paragraph("<b>I. PH√ÇN T√çCH & T√ìM T·∫ÆT:</b>",styleVN),
        Paragraph(summary.replace("\n","<br/>"),styleVN),
        Spacer(1,12),
        Paragraph("<b>II. DANH S√ÅCH TIN THAM KH·∫¢O:</b>",styleVN)
    ]
    for a in articles:
        story.append(Paragraph(f"- <a href='{a['url']}'>{a['title']}</a> ({a['source']})",styleVN))
        story.append(Spacer(1,6))
    doc.build(story)
    return fn

# --- G·ª¨I EMAIL ---
def send_email(subject,body,attachment):
    try:
        msg=MIMEMultipart()
        msg["From"]=EMAIL_SENDER
        msg["To"]=EMAIL_RECEIVER
        msg["Subject"]=subject
        msg.attach(MIMEText(body,"plain"))
        with open(attachment,"rb") as f:
            part=MIMEApplication(f.read(),_subtype="pdf")
            part.add_header("Content-Disposition",f"attachment; filename={os.path.basename(attachment)}")
            msg.attach(part)
        with smtplib.SMTP_SSL("smtp.gmail.com",465) as server:
            server.login(EMAIL_SENDER,EMAIL_PASSWORD)
            server.send_message(msg)
        print("‚úÖ Email ƒë√£ ƒë∆∞·ª£c g·ª≠i th√†nh c√¥ng!")
    except Exception as e:
        print(f"‚ùå G·ª≠i email l·ªói: {e}")

# --- CHU·ªñI T√ÅC V·ª§ CH√çNH ---
def auto_report():
    print("\n==============================")
    print("üïí B·∫Øt ƒë·∫ßu t·∫°o b√°o c√°o:", datetime.datetime.now().strftime("%Y-%m-%d %H:%M"))
    arts=get_news(GNEWS_API_KEY,KEYWORDS)
    print(f"üìÑ {len(arts)} b√†i vi·∫øt thu ƒë∆∞·ª£c.")
    summ=summarize_with_gemini(GEMINI_API_KEY,arts)
    pdf=create_pdf(summ,arts)
    send_email(
        subject=f"[B√ÅO C√ÅO KINH T·∫æ] {datetime.date.today()}",
        body="ƒê√≠nh k√®m l√† b√°o c√°o ph√¢n t√≠ch tin t·ª©c kinh t·∫ø to√†n c·∫ßu & Vi·ªát Nam (AI t·ªïng h·ª£p).",
        attachment=pdf)
    print("üéØ Ho√†n t·∫•t b√°o c√°o!")

# --- L·ªäCH CH·∫†Y T·ª∞ ƒê·ªòNG ---
schedule.every().day.at("06:55").do(auto_report)
schedule.every().day.at("14:15").do(auto_report)
schedule.every().day.at("19:55").do(auto_report)

print("üöÄ H·ªá th·ªëng kh·ªüi ƒë·ªông xong, ch·ªù ƒë·∫øn khung gi·ªù ƒë·ªãnh s·∫µn...")
auto_report()  # ch·∫°y ngay 1 l·∫ßn ƒë·∫ßu
while True:
    schedule.run_pending()
    time.sleep(60)
