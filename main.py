# =================================================================================
# üîß T·ª∞ ƒê·ªòNG T·ªîNG H·ª¢P & PH√ÇN T√çCH TIN T·ª®C KINH T·∫æ TO√ÄN C·∫¶U + VI·ªÜT NAM (v2.2)
# T√°c gi·∫£: Gemini (Ph√¢n t√≠ch & N√¢ng c·∫•p)
#
# PHI√äN B·∫¢N S·ª¨A L·ªñI:
# - [FIX] S·ª≠a l·ªói `AttributeError` ·ªü trang ch·ªß khi hi·ªÉn th·ªã l·ªãch tr√¨nh.
# - [FIX] Vi·∫øt l·∫°i logic x·ª≠ l√Ω Markdown-to-HTML trong h√†m t·∫°o PDF ƒë·ªÉ tr√°nh l·ªói
#   `ValueError: Parse error`, ƒë·∫£m b·∫£o th·∫ª HTML lu√¥n h·ª£p l·ªá.
# =================================================================================

import os
import requests
import datetime
import time
import schedule
import threading
import logging
import base64
import re # Th√™m th∆∞ vi·ªán regex ƒë·ªÉ x·ª≠ l√Ω vƒÉn b·∫£n t·ªët h∆°n
from flask import Flask, Response
from waitress import serve
from reportlab.lib.pagesizes import A4
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer
from reportlab.pdfbase import pdfmetrics
from reportlab.pdfbase.ttfonts import TTFont
import google.generativeai as genai

# ========== LOGGING ==========
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

# Lock ƒë·ªÉ ngƒÉn ch·∫∑n nhi·ªÅu lu·ªìng ch·∫°y b√°o c√°o c√πng l√∫c
REPORT_LOCK = threading.Lock()

# ========== 1Ô∏è‚É£ C·∫§U H√åNH (T·ª™ BI·∫æN M√îI TR∆Ø·ªúNG) ==========
NEWSAPI_KEY = os.getenv("NEWSAPI_KEY")
GEMINI_API_KEY = os.getenv("GEMINI_API_KEY")
RESEND_API_KEY = os.getenv("RESEND_API_KEY")
EMAIL_SENDER = os.getenv("EMAIL_SENDER")
EMAIL_RECEIVER = os.getenv("EMAIL_RECEIVER")
PORT = int(os.getenv("PORT", 10000))

if not all([NEWSAPI_KEY, GEMINI_API_KEY, RESEND_API_KEY, EMAIL_SENDER, EMAIL_RECEIVER]):
    logger.error("‚ùå L·ªñI KH·ªûI ƒê·ªòNG: Vui l√≤ng thi·∫øt l·∫≠p ƒë·∫ßy ƒë·ªß c√°c bi·∫øn m√¥i tr∆∞·ªùng: NEWSAPI_KEY, GEMINI_API_KEY, RESEND_API_KEY, EMAIL_SENDER, EMAIL_RECEIVER.")
    exit(1)

RESEND_API_URL = "https://api.resend.com/emails"
HTTP_HEADERS = {
    'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'
}

# ========== 2Ô∏è‚É£ FONT (NotoSans ∆∞u ti√™n) ==========
FONT_PATH_NOTO = "/tmp/NotoSans-Regular.ttf"
FONT_NAME = "Helvetica"
try:
    if not os.path.exists(FONT_PATH_NOTO):
        logger.info("‚è≥ T·∫£i font NotoSans...")
        r = requests.get("https://github.com/googlefonts/noto-fonts/raw/main/hinted/ttf/NotoSans/NotoSans-Regular.ttf", stream=True, timeout=30, headers=HTTP_HEADERS)
        r.raise_for_status()
        with open(FONT_PATH_NOTO, "wb") as f:
            f.write(r.content)
    pdfmetrics.registerFont(TTFont("NotoSans", FONT_PATH_NOTO))
    FONT_NAME = "NotoSans"
    logger.info("‚úÖ Font NotoSans OK!")
except Exception as e:
    logger.warning(f"‚ùå L·ªói t·∫£i font: {e}. S·ª≠ d·ª•ng Helvetica fallback.")
    FONT_NAME = "Helvetica"

# ========== 3Ô∏è‚É£ T·ª™ KH√ìA ==========
KEYWORDS = [
    "global economy", "Vietnam economy", "stock market", "real estate",
    "gold price", "silver price", "monetary policy", "interest rate",
    "US dollar", "inflation", "FDI Vietnam", "export growth",
    "manufacturing PMI", "AI economy", "tech industry", "cryptocurrency",
    "infrastructure Vietnam", "trade agreements", "supply chain",
    "recession"
]

# ========== 4Ô∏è‚É£ L·∫§Y TIN T·ª™ NEWSAPI ==========
def get_news(keywords):
    articles = []
    logger.info(f"üîÑ ƒêang l·∫•y tin t·ª´ NewsAPI v·ªõi {len(keywords)} t·ª´ kh√≥a...")
    
    for kw in keywords:
        url = f"https://newsapi.org/v2/everything?q={kw}&language=en&pageSize=2&apiKey={NEWSAPI_KEY}"
        try:
            res = requests.get(url, timeout=10, headers=HTTP_HEADERS)
            if res.status_code == 200:
                for a in res.json().get("articles", []):
                    if a.get("title") and a.get("url"):
                        articles.append({
                            "title": a["title"],
                            "url": a["url"],
                            "source": a.get("source", {}).get("name", "Unknown"),
                            "published": a.get("publishedAt"),
                            "keyword": kw
                        })
            elif res.status_code == 429:
                logger.error(f"‚ùå V∆Ø·ª¢T RATE LIMIT (429) v·ªõi t·ª´ kh√≥a '{kw}'. D·ª´ng l·∫•y tin.")
                return articles
            else:
                logger.warning(f"‚ö†Ô∏è L·ªói NewsAPI ({res.status_code}) v·ªõi t·ª´ kh√≥a '{kw}': {res.text}")
            
            time.sleep(2)
        except requests.exceptions.RequestException as e:
            logger.error(f"‚ùå L·ªói k·∫øt n·ªëi NewsAPI: {e}")
            time.sleep(5)
            
    unique_articles = list({a['url']: a for a in articles}.values())
    logger.info(f"Thu ƒë∆∞·ª£c {len(unique_articles)} b√†i vi·∫øt duy nh·∫•t.")
    return unique_articles

# ========== 5Ô∏è‚É£ PH√ÇN T√çCH GEMINI ==========
def summarize_with_gemini(api_key, articles):
    if not articles:
        return "Kh√¥ng c√≥ b√†i vi·∫øt m·ªõi ƒë·ªÉ ph√¢n t√≠ch."
    genai.configure(api_key=api_key)
    model = genai.GenerativeModel("gemini-2.5-flash")
    summary = ""
    batch_size = 10
    
    for i in range(0, len(articles), batch_size):
        batch_articles = articles[i:i + batch_size]
        titles = "\n".join([f"- {a['title']} (Ngu·ªìn: {a['source']})" for a in batch_articles])
        prompt = f"""
        B·∫°n l√† m·ªôt chuy√™n gia ph√¢n t√≠ch kinh t·∫ø vƒ© m√¥ h√†ng ƒë·∫ßu. H√£y ph√¢n t√≠ch danh s√°ch c√°c ti√™u ƒë·ªÅ tin t·ª©c sau v√† tr√¨nh b√†y k·∫øt qu·∫£ b·∫±ng ti·∫øng Vi·ªát theo ƒë·ªãnh d·∫°ng Markdown ch·∫∑t ch·∫Ω nh∆∞ sau:

        ### 1. Xu H∆∞·ªõng Kinh T·∫ø & T√†i Ch√≠nh To√†n C·∫ßu
        - (G·∫°ch ƒë·∫ßu d√≤ng cho m·ªói xu h∆∞·ªõng ch√≠nh b·∫°n nh·∫≠n th·∫•y)
        - (V√≠ d·ª•: L·∫°m ph√°t t·∫°i M·ªπ c√≥ d·∫•u hi·ªáu h·∫° nhi·ªát, FED c√≥ th·ªÉ tr√¨ ho√£n tƒÉng l√£i su·∫•t...)

        ### 2. T√°c ƒê·ªông Tr·ª±c Ti·∫øp ƒê·∫øn Kinh T·∫ø Vi·ªát Nam
        - (G·∫°ch ƒë·∫ßu d√≤ng cho m·ªói t√°c ƒë·ªông)
        - (V√≠ d·ª•: D√≤ng v·ªën FDI c√≥ th·ªÉ tƒÉng tr∆∞·ªüng tr·ªü l·∫°i, √°p l·ª±c t·ª∑ gi√° USD/VND gi·∫£m nh·∫π...)

        ### 3. Nh·∫≠n ƒê·ªãnh C∆° H·ªôi & R·ªßi Ro ƒê·∫ßu T∆∞ Ng·∫Øn H·∫°n
        - **V√†ng & Ngo·∫°i t·ªá:** (Nh·∫≠n ƒë·ªãnh c·ªßa b·∫°n)
        - **Ch·ª©ng kho√°n:** (Nh·∫≠n ƒë·ªãnh c·ªßa b·∫°n)
        - **B·∫•t ƒë·ªông s·∫£n:** (Nh·∫≠n ƒë·ªãnh c·ªßa b·∫°n)
        - **Crypto:** (Nh·∫≠n ƒë·ªãnh c·ªßa b·∫°n)

        **DANH S√ÅCH TIN T·ª®C ƒê·ªÇ PH√ÇN T√çCH:**
        {titles}
        """
        try:
            response = model.generate_content(prompt)
            summary += response.text.strip() + "\n\n"
            logger.info(f"‚úÖ Ho√†n th√†nh batch {i//batch_size + 1} v·ªõi {len(batch_articles)} b√†i.")
            time.sleep(20)
        except Exception as e:
            logger.error(f"‚ùå L·ªói Gemini batch {i//batch_size + 1}: {e}")
            summary += f"### L·ªói Ph√¢n T√≠ch Batch {i//batch_size + 1}\n- ƒê√£ x·∫£y ra l·ªói khi k·∫øt n·ªëi v·ªõi Gemini.\n\n"
    return summary.strip()

# ========== 6Ô∏è‚É£ T·∫†O PDF ==========
def create_pdf(summary_text, articles):
    filename = f"/tmp/Bao_cao_Kinh_te_{datetime.date.today()}.pdf"
    doc = SimpleDocTemplate(filename, pagesize=A4)
    styles = getSampleStyleSheet()
    styles.add(ParagraphStyle(name='VN_Body', fontName=FONT_NAME, fontSize=11, leading=14))
    styles.add(ParagraphStyle(name='VN_Title', fontName=FONT_NAME, fontSize=16, alignment=1, spaceAfter=12))
    styles.add(ParagraphStyle(name='VN_Header', fontName=FONT_NAME, fontSize=12, leading=14, spaceBefore=10, spaceAfter=6))
    
    story = [Paragraph("B√ÅO C√ÅO PH√ÇN T√çCH TIN T·ª®C KINH T·∫æ TO√ÄN C·∫¶U & VI·ªÜT NAM", styles['VN_Title'])]
    story.append(Paragraph(f"Ng√†y: {datetime.date.today()}", styles['VN_Body']))
    story.append(Spacer(1, 20))
    story.append(Paragraph("<b>I. T·ªîNG H·ª¢P & PH√ÇN T√çCH T·ª™ GEMINI</b>", styles['VN_Header']))
    
    # [FIX] Logic x·ª≠ l√Ω Markdown-to-HTML m·ªõi, an to√†n v√† m·∫°nh m·∫Ω h∆°n
    for line in summary_text.split('\n'):
        if not line.strip():
            continue
        
        # X·ª≠ l√Ω c√°c d√≤ng ti√™u ƒë·ªÅ (###)
        line = line.replace('### ', '<b>').replace('###', '<b>')
        if line.startswith('<b>'):
             line += '</b>'

        # X·ª≠ l√Ω c√°c d√≤ng in ƒë·∫≠m (**) b·∫±ng regex ƒë·ªÉ ƒë·∫£m b·∫£o c√°c th·∫ª ƒë∆∞·ª£c ƒë√≥ng m·ªü ƒë√∫ng
        # V√≠ d·ª•: **V√†ng:** -> <b>V√†ng:</b>
        line = re.sub(r'\*\*(.*?)\*\*', r'<b>\1</b>', line)

        try:
            story.append(Paragraph(line, styles['VN_Body']))
        except Exception as e:
            logger.error(f"L·ªói khi th√™m d√≤ng v√†o PDF: '{line}'. L·ªói: {e}")
            # Th√™m phi√™n b·∫£n ƒë√£ ƒë∆∞·ª£c l√†m s·∫°ch ƒë·ªÉ tr√°nh l√†m h·ªèng to√†n b·ªô file PDF
            cleaned_line = re.sub(r'<[^>]*>', '', line) # X√≥a t·∫•t c·∫£ th·∫ª HTML
            story.append(Paragraph(cleaned_line, styles['VN_Body']))

    story.append(Spacer(1, 20))
    story.append(Paragraph("<b>II. DANH S√ÅCH TIN B√ÄI THAM KH·∫¢O</b>", styles['VN_Header']))
    
    for a in articles:
        link = f"- <a href='{a['url']}' color='blue'>{a['title']}</a> (<i>{a['source']}</i>)"
        story.append(Paragraph(link, styles['VN_Body']))
        story.append(Spacer(1, 2))
        
    doc.build(story)
    logger.info(f"üìÑ ƒê√£ t·∫°o file PDF th√†nh c√¥ng: {filename}")
    return filename

# ========== 7Ô∏è‚É£ G·ª¨I EMAIL (RESEND API - HTTP) ==========
def send_email(subject, body, attachment_path):
    max_retries = 3
    for attempt in range(max_retries):
        try:
            with open(attachment_path, "rb") as f:
                pdf_data_base64 = base64.b64encode(f.read()).decode("utf-8")

            data = {
                "from": EMAIL_SENDER,
                "to": EMAIL_RECEIVER.split(','),
                "subject": subject,
                "html": body.replace('\n', '<br>'),
                "attachments": [{
                    "filename": os.path.basename(attachment_path),
                    "content": pdf_data_base64
                }]
            }
            
            headers = {
                "Authorization": f"Bearer {RESEND_API_KEY}",
                "Content-Type": "application/json"
            }
            
            logger.info(f"‚è≥ ƒêang g·ª≠i email (l·∫ßn {attempt + 1})...")
            response = requests.post(RESEND_API_URL, headers=headers, json=data, timeout=30)

            if response.status_code == 200:
                logger.info("‚úÖ Email ƒë√£ ƒë∆∞·ª£c g·ª≠i th√†nh c√¥ng qua Resend API!")
                return True
            else:
                logger.error(f"‚ùå L·ªói Resend API ({response.status_code}): {response.text}")
        
        except Exception as e:
            logger.error(f"‚ùå L·ªói g·ª≠i email (l·∫ßn {attempt + 1}): {e}")
       
        if attempt < max_retries - 1:
            time.sleep(15)
        else:
            logger.error("‚ùå G·ª≠i email th·∫•t b·∫°i sau t·∫•t c·∫£ c√°c l·∫ßn th·ª≠.")
            return False

# ========== 8Ô∏è‚É£ CH·∫†Y B√ÅO C√ÅO ==========
def run_report():
    if not REPORT_LOCK.acquire(blocking=False):
        logger.warning("üö´ B√°o c√°o ƒëang ƒë∆∞·ª£c x·ª≠ l√Ω. B·ªè qua trigger m·ªõi.")
        return
    
    pdf_file = None
    try:
        logger.info(f"============ üïí B·∫ÆT ƒê·∫¶U T·∫†O B√ÅO C√ÅO M·ªöI üïí ============")
        articles = get_news(KEYWORDS)
        
        if articles:
            logger.info(f"ü§ñ B·∫Øt ƒë·∫ßu ph√¢n t√≠ch {len(articles)} b√†i vi·∫øt b·∫±ng Gemini...")
            summary = summarize_with_gemini(GEMINI_API_KEY, articles)
            pdf_file = create_pdf(summary, articles)
            send_email(
                f"B√°o C√°o Kinh T·∫ø AI - {datetime.date.today()}",
                "ƒê√≠nh k√®m l√† b√°o c√°o ph√¢n t√≠ch tin t·ª©c kinh t·∫ø to√†n c·∫ßu & Vi·ªát Nam m·ªõi nh·∫•t (do AI t·ªïng h·ª£p).",
                pdf_file
            )
        else:
            logger.info("‚ÑπÔ∏è Kh√¥ng c√≥ b√†i vi·∫øt m·ªõi ho·∫∑c ƒë√£ g·∫∑p l·ªói khi l·∫•y tin. B·ªè qua vi·ªác t·∫°o b√°o c√°o.")
            
        logger.info("============ üéØ HO√ÄN T·∫§T T√ÅC V·ª§ B√ÅO C√ÅO üéØ ============")
        
    except Exception as e:
        logger.error(f"‚ùå L·ªói nghi√™m tr·ªçng trong qu√° tr√¨nh ch·∫°y b√°o c√°o: {e}", exc_info=True)
    finally:
        if pdf_file and os.path.exists(pdf_file):
            os.remove(pdf_file)
            logger.info(f"üóëÔ∏è ƒê√£ x√≥a file t·∫°m: {pdf_file}")
        REPORT_LOCK.release()

# ========== 9Ô∏è‚É£ L·ªäCH TR√åNH (08:00 v√† 23:00 UTC+7) ==========
schedule.every().day.at("01:00").do(run_report)
schedule.every().day.at("16:00").do(run_report)

def schedule_runner():
    logger.info("üöÄ [SCHEDULER] ƒê√£ kh·ªüi ƒë·ªông. Ch·ªù ƒë·∫øn l·ªãch ch·∫°y...")
    while True:
        schedule.run_pending()
        time.sleep(60)

# ========== 1Ô∏è‚É£0Ô∏è‚É£ SERVER (Flask + Waitress) ==========
app = Flask(__name__)

@app.route("/")
def index():
    # [FIX] Hi·ªÉn th·ªã danh s√°ch c√°c job m·ªôt c√°ch an to√†n ƒë·ªÉ tr√°nh l·ªói AttributeError
    try:
        jobs_info = "<br>".join([str(job) for job in schedule.get_jobs()])
        if not jobs_info:
            jobs_info = "Ch∆∞a c√≥ l·ªãch tr√¨nh n√†o ƒë∆∞·ª£c thi·∫øt l·∫≠p."
    except Exception:
        jobs_info = "Kh√¥ng th·ªÉ l·∫•y th√¥ng tin l·ªãch tr√¨nh."

    return f"""
    <html>
        <body style='font-family: sans-serif; text-align: center; padding-top: 50px;'>
            <h2>ü§ñ D·ªãch V·ª• B√°o C√°o Kinh T·∫ø AI ƒëang ho·∫°t ƒë·ªông</h2>
            <p><strong>L·ªãch tr√¨nh ƒë√£ thi·∫øt l·∫≠p (gi·ªù UTC):</strong></p>
            <div style='background-color: #f0f0f0; padding: 10px; border-radius: 5px; display: inline-block;'>
                <code>{jobs_info}</code>
            </div>
            <p style='margin-top: 20px;'><a href='/report' target='_blank'>Ch·∫°y b√°o c√°o th·ªß c√¥ng</a></p>
            <p><small>(S·∫Ω kh√¥ng c√≥ t√°c d·ª•ng n·∫øu ƒëang c√≥ b√°o c√°o kh√°c ch·∫°y)</small></p>
        </body>
    </html>
    """, 200

@app.route("/report")
def trigger_report():
    threading.Thread(target=run_report).start()
    return "üöÄ Y√™u c·∫ßu t·∫°o b√°o c√°o ƒë√£ ƒë∆∞·ª£c g·ª≠i. Vui l√≤ng theo d√µi log ƒë·ªÉ xem ti·∫øn tr√¨nh.", 202

@app.route("/health")
def health_check():
    return "OK", 200

@app.route('/favicon.ico')
def favicon():
    return Response(status=204)

if __name__ == "__main__":
    scheduler_thread = threading.Thread(target=schedule_runner, daemon=True)
    scheduler_thread.start()
    
    logger.info(f"üåê Kh·ªüi ƒë·ªông server tr√™n c·ªïng {PORT}...")
    serve(app, host='0.0.0.0', port=PORT)

