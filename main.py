# ü§ñ T·ª∞ ƒê·ªòNG T·ªîNG H·ª¢P & PH√ÇN T√çCH TIN T·ª®C KINH T·∫æ TO√ÄN C·∫¶U + VI·ªÜT NAM
# Gemini 2.5 Flash | PDF Unicode | G·ª≠i Gmail t·ª± ƒë·ªông | Render Free Plan (KeepAlive HTTP)
# ====================================================

import os
import requests
import datetime
import smtplib
import time
import schedule
import threading
import logging
from http.server import BaseHTTPRequestHandler, HTTPServer
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
from email.mime.application import MIMEApplication
from reportlab.lib.pagesizes import A4
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer
from reportlab.pdfbase import pdfmetrics
from reportlab.pdfbase.ttfonts import TTFont
import google.generativeai as genai

# ========== LOGGING ==========
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

# ========== 1Ô∏è‚É£ C·∫§U H√åNH ==========
NEWS_API_KEY = os.getenv("NEWS_API_KEY", "f9828f522b274b2aaa987ac15751bc47")
GEMINI_API_KEY = os.getenv("GEMINI_API_KEY", "AIzaSyDjcqpFXkay_WiK9HLCChX5L0022u3Xw-s")
EMAIL_SENDER = os.getenv("EMAIL_SENDER", "manhetc@gmail.com")
EMAIL_PASSWORD = os.getenv("EMAIL_PASSWORD", "blptzqhzdzvfweiv")
EMAIL_RECEIVER = os.getenv("EMAIL_RECEIVER", "manhetc@gmail.com")
PORT = int(os.getenv("PORT", 10000))

# ========== 2Ô∏è‚É£ FONT ==========
FONT_PATH = "/tmp/NotoSans-Regular.ttf"
FONT_NAME = "Helvetica"
try:
    if not os.path.exists(FONT_PATH):
        r = requests.get("https://github.com/googlefonts/noto-fonts/raw/main/hinted/ttf/NotoSans/NotoSans-Regular.ttf", stream=True, timeout=30)
        r.raise_for_status()
        with open(FONT_PATH, "wb") as f:
            f.write(r.content)
    pdfmetrics.registerFont(TTFont("NotoSans", FONT_PATH))
    FONT_NAME = "NotoSans"
except:
    FONT_NAME = "Helvetica"

# ========== 3Ô∏è‚É£ T·ª™ KH√ìA (ch·ªâ ti·∫øng Anh, ch·ªçn l·ªçc 8 keywords ƒë·ªÉ an to√†n limit) ==========
KEYWORDS = [
    "global economy", "stock market", "real estate", "gold price",
    "monetary policy", "inflation", "cryptocurrency", "Bitcoin"
]  # 8 keywords, ~8 requests/l·∫ßn, an to√†n 100/day

# ========== 4Ô∏è‚É£ L·∫§Y TIN (tƒÉng delay, skip n·∫øu 429) ==========
def get_news(api_key, keywords):
    articles = []
    for kw in keywords:
        url = f"https://newsapi.org/v2/everything?q={kw}&language=en&pageSize=2&apiKey={api_key}"
        try:
            res = requests.get(url, timeout=10)
            if res.status_code == 200:
                for a in res.json().get("articles", []):
                    if a.get("title") and a.get("url"):
                        articles.append({
                            "title": a["title"],
                            "url": a["url"],
                            "source": a["source"]["name"],
                            "published": a["publishedAt"],
                            "keyword": kw
                        })
            elif res.status_code == 429:
                logger.warning(f"Rate limit {kw}. Skip.")
                continue  # Skip thay v√¨ retry ƒë·ªÉ tr√°nh loop
            else:
                logger.warning(f"L·ªói {res.status_code} {kw}")
            time.sleep(5)  # Delay 5 gi√¢y ƒë·ªÉ tr√°nh rate limit
        except Exception as e:
            logger.error(f"NewsAPI error: {e}")
            time.sleep(5)
    logger.info(f"Thu ƒë∆∞·ª£c {len(articles)} b√†i vi·∫øt.")
    return articles

# ========== 5Ô∏è‚É£ GEMINI (gi·ªØ nguy√™n prompt) ==========
def summarize_with_gemini(api_key, articles):
    if not articles:
        return "Kh√¥ng c√≥ b√†i vi·∫øt m·ªõi ƒë·ªÉ ph√¢n t√≠ch."
    genai.configure(api_key=api_key)
    model = genai.GenerativeModel("gemini-2.5-flash")
    titles = "\n".join([f"- {a['title']} ({a['source']})" for a in articles])
    prompt = f"""
    B·∫°n l√† chuy√™n gia ph√¢n t√≠ch kinh t·∫ø to√†n c·∫ßu.
    H√£y ƒë·ªçc danh s√°ch tin t·ª©c sau v√†:
    1. T√≥m t·∫Øt xu h∆∞·ªõng kinh t·∫ø - t√†i ch√≠nh n·ªïi b·∫≠t.
    2. Ph√¢n t√≠ch t√°c ƒë·ªông ƒë·∫øn Vi·ªát Nam (FDI, t·ª∑ gi√°, ƒë·∫ßu t∆∞, xu·∫•t kh·∫©u...).
    3. Nh·∫≠n ƒë·ªãnh c∆° h·ªôi v√† r·ªßi ro ƒë·∫ßu t∆∞ (v√†ng, b·∫°c, ch·ª©ng kho√°n, crypto, BƒêS).
    4. Tr√¨nh b√†y b·∫±ng ti·∫øng Vi·ªát, r√µ r√†ng, s√∫c t√≠ch v√† chuy√™n nghi·ªáp.

    DANH S√ÅCH TIN:
    {titles}
    """
    try:
        response = model.generate_content(prompt)
        return response.text.strip()
    except Exception as e:
        logger.error(f"Gemini error: {e}")
        return "L·ªói Gemini."

# ========== 6Ô∏è‚É£ PDF ==========
def create_pdf(summary_text, articles):
    filename = f"Bao_cao_Kinh_te
