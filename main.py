# ====================================================
# üîß T·ª∞ ƒê·ªòNG T·ªîNG H·ª¢P & PH√ÇN T√çCH TIN T·ª®C KINH T·∫æ TO√ÄN C·∫¶U + VI·ªÜT NAM
# Gemini 2.5 Flash, song ng·ªØ Vi·ªát-Anh, PDF Unicode (DejaVuSans), g·ª≠i Gmail t·ª± ƒë·ªông
# S·ª≠ d·ª•ng NewsAPI.org v·ªõi key f9828f522b274b2aaa987ac15751bc47
# ====================================================

import os
import requests
import datetime
import smtplib
import time
import schedule
import threading
import logging
from http.server import BaseHTTPRequestHandler, HTTPServer
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
from email.mime.application import MIMEApplication
from reportlab.lib.pagesizes import A4
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer
from reportlab.pdfbase import pdfmetrics
from reportlab.pdfbase.ttfonts import TTFont
import google.generativeai as genai

# ========== LOGGING ==========
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

# ========== 1Ô∏è‚É£ C·∫§U H√åNH ==========
NEWSAPI_KEY = os.getenv("NEWSAPI_KEY", "f9828f522b274b2aaa987ac15751bc47")
GEMINI_API_KEY = os.getenv("GEMINI_API_KEY", "AIzaSyDjcqpFXkay_WiK9HLCChX5L0022u3Xw-s")
EMAIL_SENDER = os.getenv("EMAIL_SENDER", "manhetc@gmail.com")
EMAIL_PASSWORD = os.getenv("EMAIL_PASSWORD", "blptzqhzdzvfweiv")
EMAIL_RECEIVER = os.getenv("EMAIL_RECEIVER", "manhetc@gmail.com")
PORT = int(os.getenv("PORT", 10000))

# ========== 2Ô∏è‚É£ FONT (DejaVuSans v·ªõi fallback NotoSans) ==========
FONT_PATH_NOTO = "/tmp/NotoSans-Regular.ttf"
FONT_NAME = "DejaVuSans"  # Fallback m·∫∑c ƒë·ªãnh
try:
    if not os.path.exists(FONT_PATH_NOTO):
        logger.info("‚è≥ T·∫£i font NotoSans...")
        r = requests.get("https://github.com/googlefonts/noto-fonts/raw/main/hinted/ttf/NotoSans/NotoSans-Regular.ttf", stream=True, timeout=30)
        r.raise_for_status()
        with open(FONT_PATH_NOTO, "wb") as f:
            f.write(r.content)
    pdfmetrics.registerFont(TTFont("NotoSans", FONT_PATH_NOTO))
    FONT_NAME = "NotoSans"
    logger.info("‚úÖ Font NotoSans OK!")
except Exception as e:
    logger.warning(f"‚ùå NotoSans fail: {e}. D√πng DejaVuSans.")
    !apt-get update -y -qq && apt-get install -y -qq fonts-dejavu
    pdfmetrics.registerFont(TTFont("DejaVuSans", "/usr/share/fonts/truetype/dejavu/DejaVuSans.ttf"))

# ========== 3Ô∏è‚É£ T·ª™ KH√ìA (32 keywords g·ªëc) ==========
KEYWORDS = [
    "kinh t·∫ø th·∫ø gi·ªõi", "kinh t·∫ø Vi·ªát Nam", "th·ªã tr∆∞·ªùng ch·ª©ng kho√°n", "b·∫•t ƒë·ªông s·∫£n",
    "gi√° v√†ng", "gi√° b·∫°c", "th·ªã tr∆∞·ªùng d·∫ßu m·ªè", "ch√≠nh s√°ch ti·ªÅn t·ªá", "l√£i su·∫•t ng√¢n h√†ng",
    "t·ª∑ gi√° USD", "l·∫°m ph√°t", "FDI Vi·ªát Nam", "xu·∫•t kh·∫©u", "s·∫£n xu·∫•t c√¥ng nghi·ªáp",
    "th·ªã tr∆∞·ªùng lao ƒë·ªông", "AI v√† kinh t·∫ø", "doanh nghi·ªáp c√¥ng ngh·ªá",
    "global economy", "Vietnam economy", "stock market", "real estate",
    "gold price", "silver market", "oil price", "monetary policy",
    "interest rate", "US dollar", "inflation", "cryptocurrency",
    "Bitcoin", "Ethereum", "AI and business", "FDI in Vietnam"
]

# ========== 4Ô∏è‚É£ L·∫§Y TIN T·ª™ NEWSAPI ==========
def get_news(keywords):
    articles = []
    logger.info("üîÑ ƒêang l·∫•y tin t·ª´ NewsAPI...")
    for kw in keywords:
        for lang in ["vi", "en"]:
            url = f"https://newsapi.org/v2/everything?q={kw}&language={lang}&pageSize=2&apiKey={NEWSAPI_KEY}"
            try:
                res = requests.get(url, timeout=10)
                if res.status_code == 200:
                    for a in res.json().get("articles", []):
                        if a.get("title") and a.get("url"):
                            articles.append({
                                "title": a["title"],
                                "url": a["url"],
                                "source": a.get("source", {}).get("name", "Unknown"),
                                "published": a.get("publishedAt"),
                                "keyword": kw
                            })
                elif res.status_code == 429:
                    logger.warning(f"‚ö†Ô∏è Rate limit v·ªõi t·ª´ kh√≥a '{kw}' (ng√¥n ng·ªØ: {lang}). B·ªè qua.")
                    time.sleep(60)  # Ch·ªù 1 ph√∫t n·∫øu rate limit
                else:
                    logger.warning(f"‚ö†Ô∏è L·ªói NewsAPI ({res.status_code}) v·ªõi t·ª´ kh√≥a '{kw}' (ng√¥n ng·ªØ: {lang}): {res.json().get('message', 'Kh√¥ng r√µ')}")
                time.sleep(3)  # Delay 3 gi√¢y ƒë·ªÉ tr√°nh rate limit
            except Exception as e:
                logger.error(f"‚ùå L·ªói NewsAPI: {e}")
                time.sleep(3)
    logger.info(f"Thu ƒë∆∞·ª£c {len(articles)} b√†i vi·∫øt.")
    return articles

# ========== 5Ô∏è‚É£ PH√ÇN T√çCH GEMINI ==========
def summarize_with_gemini(api_key, articles):
    if not articles:
        return "Kh√¥ng c√≥ b√†i vi·∫øt m·ªõi ƒë·ªÉ ph√¢n t√≠ch. Ki·ªÉm tra API key NewsAPI ho·∫∑c rate limit."
    genai.configure(api_key=api_key)
    model = genai.GenerativeModel("gemini-2.5-flash")
    titles = "\n".join([f"- {a['title']} ({a['source']})" for a in articles[:15]])
    prompt = f"""
    Chuy√™n gia kinh t·∫ø: T√≥m t·∫Øt xu h∆∞·ªõng, t√°c ƒë·ªông VN, c∆° h·ªôi/r·ªßi ro ƒë·∫ßu t∆∞ b·∫±ng ti·∫øng Vi·ªát.
    TIN: {titles}
    """
    try:
        response = model.generate_content(prompt)
        return response.text.strip()
    except Exception as e:
        logger.error(f"‚ùå L·ªói Gemini: {e}")
        return f"L·ªói Gemini: {e}"

# ========== 6Ô∏è‚É£ T·∫†O PDF ==========
def create_pdf(summary_text, articles):
    filename = f"Bao_cao_Kinh_te_{datetime.date.today()}.pdf"
    doc = SimpleDocTemplate(filename, pagesize=A4)
    styles = getSampleStyleSheet()
    styleVN = ParagraphStyle('VN', parent=styles['Normal'], fontName=FONT_NAME, fontSize=11, encoding='utf-8')
    titleStyle = ParagraphStyle('TitleVN', parent=styles['Title'], fontName=FONT_NAME, fontSize=16, alignment=1, encoding='utf-8')

    story = []
    story.append(Paragraph("B√ÅO C√ÅO PH√ÇN T√çCH TIN T·ª®C KINH T·∫æ TO√ÄN C·∫¶U & VI·ªÜT NAM", titleStyle))
    story.append(Spacer(1, 12))
    story.append(Paragraph(f"Ng√†y: {datetime.date.today()}", styleVN))
    story.append(Spacer(1, 12))
    story.append(Paragraph("<b>I. PH√ÇN T√çCH (Gemini 2.5 Flash):</b>", styleVN))
    story.append(Paragraph(summary_text.replace("\n", "<br/>"), styleVN))
    story.append(Spacer(1, 12))
    story.append(Paragraph("<b>II. DANH S√ÅCH TIN THAM KH·∫¢O:</b>", styleVN))
    for a in articles:
        story.append(Paragraph(f"- <a href='{a['url']}'>{a['title']}</a> ({a['source']})", styleVN))
        story.append(Spacer(1, 6))
    doc.build(story)
    return filename

# ========== 7Ô∏è‚É£ G·ª¨I EMAIL ==========
def send_email(subject, body, attachment_path):
    max_retries = 3
    for attempt in range(max_retries):
        try:
            msg = MIMEMultipart()
            msg["From"] = EMAIL_SENDER
            msg["To"] = EMAIL_RECEIVER
            msg["Subject"] = subject
            msg.attach(MIMEText(body, "plain", "utf-8"))
            with open(attachment_path, "rb") as f:
                part = MIMEApplication(f.read(), _subtype="pdf")
                part.add_header("Content-Disposition", f"attachment; filename={os.path.basename(attachment_path)}")
                msg.attach(part)
            with smtplib.SMTP_SSL("smtp.gmail.com", 465) as server:
                server.login(EMAIL_SENDER, EMAIL_PASSWORD)
                server.send_message(msg)
            logger.info("‚úÖ Email ƒë√£ ƒë∆∞·ª£c g·ª≠i th√†nh c√¥ng!")
            return
        except Exception as e:
            logger.error(f"‚ùå L·ªói email (l·∫ßn {attempt + 1}): {e}")
            if attempt < max_retries - 1:
                time.sleep(5)

# ========== 8Ô∏è‚É£ CH·∫†Y B√ÅO C√ÅO ==========
def run_report():
    logger.info(f"üïí B·∫Øt ƒë·∫ßu t·∫°o b√°o c√°o: {datetime.datetime.now()}")
    try:
        articles = get_news(KEYWORDS)
        logger.info(f"üìÑ Thu ƒë∆∞·ª£c {len(articles)} b√†i vi·∫øt.")
        summary = summarize_with_gemini(GEMINI_API_KEY, articles)
        pdf_file = create_pdf(summary, articles)
        send_email(
            subject="[B√ÅO C√ÅO KINH T·∫æ TO√ÄN C·∫¶U & VI·ªÜT NAM]",
            body="ƒê√≠nh k√®m l√† b√°o c√°o ph√¢n t√≠ch tin t·ª©c kinh t·∫ø to√†n c·∫ßu & Vi·ªát Nam m·ªõi nh·∫•t (AI t·ªïng h·ª£p).",
            attachment_path=pdf_file
        )
        logger.info("üéØ Ho√†n t·∫•t b√°o c√°o!")
    except Exception as e:
        logger.error(f"‚ùå L·ªói t·ªïng th·ªÉ: {e}")

# ========== 9Ô∏è‚É£ L·ªäCH TR√åNH (8h00 s√°ng v√† 23h00 t·ªëi UTC+7) ==========
schedule.every().day.at("08:00").do(run_report)  # 8h00 s√°ng
schedule.every().day.at("23:00").do(run_report)  # 23h00 t·ªëi

def schedule_runner():
    logger.info("üöÄ H·ªá th·ªëng kh·ªüi ƒë·ªông, ch·ªù ƒë·∫øn 08:00 ho·∫∑c 23:00...")
    while True:
        schedule.run_pending()
        time.sleep(60)

# ========== üîü KEEP-ALIVE SERVER (Render Free Plan) ==========
class KeepAliveHandler(BaseHTTPRequestHandler):
    def do_GET(self):
        if self.path == "/report":
            run_report()
            self.send_response(200)
            self.end_headers()
            self.wfile.write(b"Report generated and sent!")
        elif self.path == "/health":
            self.send_response(200)
            self.end_headers()
            self.wfile.write(b"OK")
        else:
            self.send_response(200)
            self.end_headers()
            self.wfile.write(b"Service running. /report to trigger manually.")

def run_keepalive_server():
    server = HTTPServer(("0.0.0.0", PORT), KeepAliveHandler)
    logger.info(f"üåê KeepAlive server running on port {PORT}")
    server.serve_forever()

# Ch·∫°y server v√† scheduler
threading.Thread(target=schedule_runner, daemon=True).start()
threading.Thread(target=run_keepalive_server, daemon=True).start()
