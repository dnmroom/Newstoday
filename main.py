# ====================================================
# ü§ñ T·ª∞ ƒê·ªòNG T·ªîNG H·ª¢P & PH√ÇN T√çCH TIN T·ª®C KINH T·∫æ TO√ÄN C·∫¶U + VI·ªÜT NAM
# Gemini 2.5 Flash | PDF Unicode | G·ª≠i Gmail t·ª± ƒë·ªông | Render Free Plan (KeepAlive HTTP)
# ====================================================

import os
import requests
import datetime
import smtplib
import time
import schedule
import threading
from http.server import BaseHTTPRequestHandler, HTTPServer
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
from email.mime.application import MIMEApplication
from reportlab.lib.pagesizes import A4
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer
from reportlab.pdfbase import pdfmetrics
from reportlab.pdfbase.ttfonts import TTFont
import google.generativeai as genai

# ========== 1Ô∏è‚É£ C·∫§U H√åNH BI·∫æN M√îI TR∆Ø·ªúNG ==========
GNEWS_API_KEY = os.getenv("GNEWS_API_KEY", "5774cbc463efb34d8641d9896f93ab3b")
GEMINI_API_KEY = os.getenv("GEMINI_API_KEY", "AIzaSyDjcqpFXkay_WiK9HLCChX5L0022u3Xw-s")
EMAIL_SENDER = os.getenv("EMAIL_SENDER", "manhetc@gmail.com")
EMAIL_PASSWORD = os.getenv("EMAIL_PASSWORD", "blptzqhzdzvfweiv")
EMAIL_RECEIVER = os.getenv("EMAIL_RECEIVER", "manhetc@gmail.com")

# ========== 2Ô∏è‚É£ FONT (t·∫£i tr·ª±c ti·∫øp n·∫øu ch∆∞a c√≥) ==========
FONT_PATH = "/tmp/NotoSans-Regular.ttf"
if not os.path.exists(FONT_PATH):
    print("‚è≥ T·∫£i font NotoSans t·ª´ GitHub...")
    url = "https://github.com/googlefonts/noto-fonts/raw/main/hinted/ttf/NotoSans/NotoSans-Regular.ttf"
    try:
        r = requests.get(url, stream=True, timeout=30)
        r.raise_for_status()
        with open(FONT_PATH, "wb") as f:
            f.write(r.content)
        print("‚úÖ Font NotoSans ƒë√£ ƒë∆∞·ª£c t·∫£i th√†nh c√¥ng!")
    except Exception as e:
        print(f"‚ùå Kh√¥ng th·ªÉ t·∫£i font NotoSans: {e}")

pdfmetrics.registerFont(TTFont("NotoSans", FONT_PATH))
FONT_NAME = "NotoSans"

# ========== 3Ô∏è‚É£ T·ª™ KH√ìA ==========
KEYWORDS = [
    # Ti·∫øng Vi·ªát
    "kinh t·∫ø th·∫ø gi·ªõi", "kinh t·∫ø Vi·ªát Nam", "th·ªã tr∆∞·ªùng ch·ª©ng kho√°n", "b·∫•t ƒë·ªông s·∫£n",
    "gi√° v√†ng", "gi√° b·∫°c", "th·ªã tr∆∞·ªùng d·∫ßu m·ªè", "ch√≠nh s√°ch ti·ªÅn t·ªá", "l√£i su·∫•t ng√¢n h√†ng",
    "t·ª∑ gi√° USD", "l·∫°m ph√°t", "FDI Vi·ªát Nam", "xu·∫•t kh·∫©u", "s·∫£n xu·∫•t c√¥ng nghi·ªáp",
    "th·ªã tr∆∞·ªùng lao ƒë·ªông", "AI v√† kinh t·∫ø", "doanh nghi·ªáp c√¥ng ngh·ªá",
    # Ti·∫øng Anh
    "global economy", "Vietnam economy", "stock market", "real estate",
    "gold price", "silver market", "oil price", "monetary policy",
    "interest rate", "US dollar", "inflation", "cryptocurrency",
    "Bitcoin", "Ethereum", "AI and business", "FDI in Vietnam"
]

# ========== 4Ô∏è‚É£ L·∫§Y TIN ==========
def get_news(api_key, keywords):
    articles = []
    for kw in keywords:
        for lang in ["vi", "en"]:
            url = f"https://gnews.io/api/v4/search?q={kw}&lang={lang}&max=2&token={api_key}"
            try:
                res = requests.get(url, timeout=10)
                if res.status_code == 200:
                    for a in res.json().get("articles", []):
                        if a["title"] and a["url"]:
                            articles.append({
                                "title": a["title"],
                                "url": a["url"],
                                "source": a["source"]["name"],
                                "published": a["publishedAt"],
                                "keyword": kw
                            })
                else:
                    print(f"‚ö†Ô∏è L·ªói l·∫•y tin '{kw}' ({lang}): {res.status_code}")
            except Exception as e:
                print(f"‚ùå L·ªói GNews API: {e}")
            time.sleep(1)
    return articles

# ========== 5Ô∏è‚É£ PH√ÇN T√çCH V·ªöI GEMINI ==========
def summarize_with_gemini(api_key, articles):
    if not articles:
        return "Kh√¥ng c√≥ b√†i vi·∫øt m·ªõi ƒë·ªÉ ph√¢n t√≠ch."
    genai.configure(api_key=api_key)
    model = genai.GenerativeModel("gemini-2.5-flash")
    titles = "\n".join([f"- {a['title']} ({a['source']})" for a in articles])
    prompt = f"""
    B·∫°n l√† chuy√™n gia ph√¢n t√≠ch kinh t·∫ø to√†n c·∫ßu.
    H√£y ƒë·ªçc danh s√°ch tin t·ª©c sau v√†:
    1. T√≥m t·∫Øt xu h∆∞·ªõng kinh t·∫ø - t√†i ch√≠nh n·ªïi b·∫≠t.
    2. Ph√¢n t√≠ch t√°c ƒë·ªông ƒë·∫øn Vi·ªát Nam (FDI, t·ª∑ gi√°, ƒë·∫ßu t∆∞, xu·∫•t kh·∫©u...).
    3. Nh·∫≠n ƒë·ªãnh c∆° h·ªôi v√† r·ªßi ro ƒë·∫ßu t∆∞ (v√†ng, b·∫°c, ch·ª©ng kho√°n, crypto, BƒêS).
    4. Tr√¨nh b√†y b·∫±ng ti·∫øng Vi·ªát, s√∫c t√≠ch v√† chuy√™n nghi·ªáp.

    DANH S√ÅCH TIN:
    {titles}
    """
    try:
        response = model.generate_content(prompt)
        return response.text.strip()
    except Exception as e:
        return f"L·ªói Gemini API: {e}"

# ========== 6Ô∏è‚É£ T·∫†O PDF ==========
def create_pdf(summary_text, articles):
    filename = f"Bao_cao_Kinh_te_{datetime.date.today()}.pdf"
    doc = SimpleDocTemplate(filename, pagesize=A4)
    styles = getSampleStyleSheet()
    styleVN = ParagraphStyle('VN', parent=styles['Normal'], fontName=FONT_NAME, fontSize=11)
    titleStyle = ParagraphStyle('TitleVN', parent=styles['Title'], fontName=FONT_NAME, fontSize=16, alignment=1)

    story = []
    story.append(Paragraph("B√ÅO C√ÅO PH√ÇN T√çCH TIN T·ª®C KINH T·∫æ TO√ÄN C·∫¶U & VI·ªÜT NAM", titleStyle))
    story.append(Spacer(1, 12))
    story.append(Paragraph(f"Ng√†y: {datetime.date.today()}", styleVN))
    story.append(Spacer(1, 12))
    story.append(Paragraph("<b>I. PH√ÇN T√çCH & T√ìM T·∫ÆT (Gemini 2.5 Flash):</b>", styleVN))
    story.append(Paragraph(summary_text.replace("\n", "<br/>"), styleVN))
    story.append(Spacer(1, 12))
    story.append(Paragraph("<b>II. DANH S√ÅCH TIN THAM KH·∫¢O:</b>", styleVN))
    for a in articles:
        story.append(Paragraph(f"- <a href='{a['url']}'>{a['title']}</a> ({a['source']})", styleVN))
        story.append(Spacer(1, 6))
    doc.build(story)
    return filename

# ========== 7Ô∏è‚É£ G·ª¨I EMAIL ==========
def send_email(subject, body, attachment_path):
    try:
        msg = MIMEMultipart()
        msg["From"] = EMAIL_SENDER
        msg["To"] = EMAIL_RECEIVER
        msg["Subject"] = subject
        msg.attach(MIMEText(body, "plain"))
        with open(attachment_path, "rb") as f:
            part = MIMEApplication(f.read(), _subtype="pdf")
            part.add_header("Content-Disposition", f"attachment; filename={os.path.basename(attachment_path)}")
            msg.attach(part)
        with smtplib.SMTP_SSL("smtp.gmail.com", 465) as server:
            server.login(EMAIL_SENDER, EMAIL_PASSWORD)
            server.send_message(msg)
        print("‚úÖ Email ƒë√£ g·ª≠i th√†nh c√¥ng!")
    except Exception as e:
        print(f"‚ùå L·ªói g·ª≠i email: {e}")

# ========== 8Ô∏è‚É£ L·ªäCH TR√åNH ==========
def run_report():
    print(f"\nüïí B·∫Øt ƒë·∫ßu t·∫°o b√°o c√°o: {datetime.datetime.now()}")
    articles = get_news(GNEWS_API_KEY, KEYWORDS)
    print(f"üìÑ Thu ƒë∆∞·ª£c {len(articles)} b√†i vi·∫øt.")
    summary = summarize_with_gemini(GEMINI_API_KEY, articles)
    pdf_file = create_pdf(summary, articles)
    send_email(
        subject="[B√ÅO C√ÅO KINH T·∫æ TO√ÄN C·∫¶U & VI·ªÜT NAM]",
        body="ƒê√≠nh k√®m l√† b√°o c√°o ph√¢n t√≠ch tin t·ª©c kinh t·∫ø to√†n c·∫ßu & Vi·ªát Nam m·ªõi nh·∫•t (AI t·ªïng h·ª£p).",
        attachment_path=pdf_file
    )
    print("üéØ Ho√†n t·∫•t b√°o c√°o!\n")

schedule.every().day.at("06:55").do(run_report)
schedule.every().day.at("14:15").do(run_report)
schedule.every().day.at("19:55").do(run_report)

def schedule_runner():
    print("üöÄ H·ªá th·ªëng kh·ªüi ƒë·ªông xong, ch·ªù ƒë·∫øn khung gi·ªù ƒë·ªãnh s·∫µn...")
    while True:
        schedule.run_pending()
        time.sleep(30)

threading.Thread(target=schedule_runner, daemon=True).start()

# ========== 9Ô∏è‚É£ KEEP-ALIVE SERVER (Render Free plan c·∫ßn c√≥ c·ªïng HTTP) ==========
class KeepAliveHandler(BaseHTTPRequestHandler):
    def do_GET(self):
        self.send_response(200)
        self.end_headers()
        self.wfile.write(b"Service running and scheduling OK")

def run_keepalive_server():
    port = int(os.environ.get("PORT", 10000))
    server = HTTPServer(("0.0.0.0", port), KeepAliveHandler)
    print(f"üåê KeepAlive HTTP server running on port {port}")
    server.serve_forever()

run_keepalive_server()
